[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/adapters/legacy-adapter.js",
    "memberof": null,
    "longname": "lib/adapters/legacy-adapter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\n/**\n * @access private\n */\nexport default class LegacyAdater {\n  constructor (textEditor) { this.textEditor = textEditor }\n\n  enableCache () { this.useCache = true }\n\n  clearCache () {\n    this.useCache = false\n    delete this.heightCache\n    delete this.scrollTopCache\n    delete this.scrollLeftCache\n    delete this.maxScrollTopCache\n  }\n\n  onDidChangeScrollTop (callback) {\n    return this.textEditor.onDidChangeScrollTop(callback)\n  }\n\n  onDidChangeScrollLeft (callback) {\n    return this.textEditor.onDidChangeScrollLeft(callback)\n  }\n\n  getHeight () {\n    if (this.useCache) {\n      if (!this.heightCache) {\n        this.heightCache = this.textEditor.getHeight()\n      }\n      return this.heightCache\n    }\n    return this.textEditor.getHeight()\n  }\n\n  getScrollTop () {\n    if (this.useCache) {\n      if (!this.scrollTopCache) {\n        this.scrollTopCache = this.textEditor.getScrollTop()\n      }\n      return this.scrollTopCache\n    }\n    return this.textEditor.getScrollTop()\n  }\n\n  setScrollTop (scrollTop) {\n    return this.textEditor.setScrollTop(scrollTop)\n  }\n\n  getScrollLeft () {\n    if (this.useCache) {\n      if (!this.scrollLeftCache) {\n        this.scrollLeftCache = this.textEditor.getScrollLeft()\n      }\n      return this.scrollLeftCache\n    }\n\n    return this.textEditor.getScrollLeft()\n  }\n\n  getMaxScrollTop () {\n    if (this.maxScrollTopCache != null && this.useCache) {\n      return this.maxScrollTopCache\n    }\n    var maxScrollTop = this.textEditor.displayBuffer.getMaxScrollTop()\n    var lineHeight = this.textEditor.getLineHeightInPixels()\n\n    if (this.scrollPastEnd) {\n      maxScrollTop -= this.getHeight() - 3 * lineHeight\n    }\n    if (this.useCache) { this.maxScrollTopCache = maxScrollTop }\n    return maxScrollTop\n  }\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LegacyAdater",
    "memberof": "lib/adapters/legacy-adapter.js",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "access": "private",
    "export": true,
    "importPath": "minimap/lib/adapters/legacy-adapter.js",
    "importStyle": "LegacyAdater",
    "description": null,
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#constructor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "textEditor",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "textEditor",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#textEditor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "enableCache",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#enableCache",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 5,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "useCache",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#useCache",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearCache",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#clearCache",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "useCache",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#useCache",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidChangeScrollTop",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#onDidChangeScrollTop",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidChangeScrollLeft",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#onDidChangeScrollLeft",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getHeight",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#getHeight",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "heightCache",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#heightCache",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getScrollTop",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#getScrollTop",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrollTopCache",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#scrollTopCache",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setScrollTop",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#setScrollTop",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "scrollTop",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getScrollLeft",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#getScrollLeft",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrollLeftCache",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#scrollLeftCache",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getMaxScrollTop",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#getMaxScrollTop",
    "access": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "maxScrollTopCache",
    "memberof": "lib/adapters/legacy-adapter.js~LegacyAdater",
    "longname": "lib/adapters/legacy-adapter.js~LegacyAdater#maxScrollTopCache",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/adapters/stable-adapter.js",
    "memberof": null,
    "longname": "lib/adapters/stable-adapter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\n/**\n * @access private\n */\nexport default class StableAdapter {\n  constructor (textEditor) {\n    this.textEditor = textEditor\n    this.textEditorElement = atom.views.getView(this.textEditor)\n  }\n\n  enableCache () { this.useCache = true }\n\n  clearCache () {\n    this.useCache = false\n    delete this.heightCache\n    delete this.scrollTopCache\n    delete this.scrollLeftCache\n    delete this.maxScrollTopCache\n  }\n\n  onDidChangeScrollTop (callback) {\n    return this.textEditorElement.onDidChangeScrollTop(callback)\n  }\n\n  onDidChangeScrollLeft (callback) {\n    return this.textEditorElement.onDidChangeScrollLeft(callback)\n  }\n\n  getHeight () {\n    if (this.useCache) {\n      if (!this.heightCache) {\n        this.heightCache = this.textEditorElement.getHeight()\n      }\n      return this.heightCache\n    }\n    return this.textEditorElement.getHeight()\n  }\n\n  getScrollTop () {\n    if (this.useCache) {\n      if (!this.scrollTopCache) {\n        this.scrollTopCache = this.textEditorElement.getScrollTop()\n      }\n      return this.scrollTopCache\n    }\n    return this.textEditorElement.getScrollTop()\n  }\n\n  setScrollTop (scrollTop) {\n    this.textEditorElement.setScrollTop(scrollTop)\n  }\n\n  getScrollLeft () {\n    if (this.useCache) {\n      if (!this.scrollLeftCache) {\n        this.scrollLeftCache = this.textEditorElement.getScrollLeft()\n      }\n      return this.scrollLeftCache\n    }\n    return this.textEditorElement.getScrollLeft()\n  }\n\n  getMaxScrollTop () {\n    if (this.maxScrollTopCache != null && this.useCache) {\n      return this.maxScrollTopCache\n    }\n\n    let maxScrollTop = this.textEditorElement.getScrollHeight() - this.getHeight()\n    let lineHeight = this.textEditor.getLineHeightInPixels()\n\n    if (this.scrollPastEnd) {\n      maxScrollTop -= this.getHeight() - 3 * lineHeight\n    }\n\n    if (this.useCache) {\n      this.maxScrollTopCache = maxScrollTop\n    }\n\n    return maxScrollTop\n  }\n}\n"
  },
  {
    "__docId__": 20,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "StableAdapter",
    "memberof": "lib/adapters/stable-adapter.js",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter",
    "access": "private",
    "export": true,
    "importPath": "minimap/lib/adapters/stable-adapter.js",
    "importStyle": "StableAdapter",
    "description": null,
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 21,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#constructor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "textEditor",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "textEditor",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#textEditor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "textEditorElement",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#textEditorElement",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "enableCache",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#enableCache",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "useCache",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#useCache",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearCache",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#clearCache",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "useCache",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#useCache",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidChangeScrollTop",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#onDidChangeScrollTop",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidChangeScrollLeft",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#onDidChangeScrollLeft",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getHeight",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#getHeight",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "heightCache",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#heightCache",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getScrollTop",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#getScrollTop",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrollTopCache",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#scrollTopCache",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setScrollTop",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#setScrollTop",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "scrollTop",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getScrollLeft",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#getScrollLeft",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrollLeftCache",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#scrollLeftCache",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getMaxScrollTop",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#getMaxScrollTop",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "maxScrollTopCache",
    "memberof": "lib/adapters/stable-adapter.js~StableAdapter",
    "longname": "lib/adapters/stable-adapter.js~StableAdapter#maxScrollTopCache",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/decoration.js",
    "memberof": null,
    "longname": "lib/decoration.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\nimport _ from 'underscore-plus'\nimport {Emitter} from 'atom'\n\nvar idCounter = 0\nvar nextId = function () { return idCounter++ }\n\n/**\n * The `Decoration` class represents a decoration in the Minimap.\n *\n * It has the same API than the `Decoration` class of a text editor.\n */\nexport default class Decoration {\n\n  /**\n   * Returns `true` if the passed-in decoration properties matches the\n   * specified type.\n   *\n   * @param  {Object} decorationProperties the decoration properties to match\n   * @param  {string} type the decoration type to match\n   * @return {boolean} whether the decoration properties match the type\n   */\n  static isType (decorationProperties, type) {\n    if (_.isArray(decorationProperties.type)) {\n      if (decorationProperties.type.indexOf(type) >= 0) { return true }\n      return false\n    } else {\n      return type === decorationProperties.type\n    }\n  }\n\n  /**\n   * Creates a new decoration.\n   *\n   * @param  {Marker} marker the target marker for the decoration\n   * @param  {Minimap} minimap the Minimap where the decoration will\n   *                           be displayed\n   * @param  {Object} properties the decoration's properties\n   */\n  constructor (marker, minimap, properties) {\n    /**\n     * @access private\n     */\n    this.marker = marker\n    /**\n     * @access private\n     */\n    this.minimap = minimap\n    /**\n     * @access private\n     */\n    this.emitter = new Emitter()\n    /**\n     * @access private\n     */\n    this.id = nextId()\n    /**\n     * @access private\n     */\n    this.properties = null\n    this.setProperties(properties)\n    this.properties.id = this.id\n    /**\n     * @access private\n     */\n    this.destroyed = false\n    /**\n     * @access private\n     */\n    this.markerDestroyDisposable = this.marker.onDidDestroy(() => {\n      this.destroy()\n    })\n  }\n\n  /**\n   * Destroy this marker.\n   *\n   * If you own the marker, you should use `Marker#destroy` which will destroy\n   * this decoration.\n   */\n  destroy () {\n    if (this.destroyed) { return }\n\n    this.markerDestroyDisposable.dispose()\n    this.markerDestroyDisposable = null\n    this.destroyed = true\n    this.emitter.emit('did-destroy')\n    this.emitter.dispose()\n  }\n\n  /**\n   * Returns whether this decoration is destroyed or not.\n   *\n   * @return {boolean} whether this decoration is destroyed or not\n   */\n  isDestroyed () { return this.destroyed }\n\n  /**\n   * Registers an event listener to the `did-change-properties` event.\n   *\n   * This event is triggered when the decoration update method is called.\n   *\n   * @param  {function(change:Object):void} callback a function to call\n   *                                        when the event is triggered\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidChangeProperties (callback) {\n    return this.emitter.on('did-change-properties', callback)\n  }\n\n  /**\n   * Registers an event listener to the `did-destroy` event.\n   *\n   * @param  {function():void} callback a function to call when the event\n   *                                    is triggered\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidDestroy (callback) {\n    return this.emitter.on('did-destroy', callback)\n  }\n\n  /**\n   * An id unique across all Decoration objects.\n   *\n   * @return {number} the decoration id\n   */\n  getId () { return this.id }\n\n  /**\n   * Returns the marker associated with this Decoration.\n   *\n   * @return {Marker} the decoration's marker\n   */\n  getMarker () { return this.marker }\n\n  /**\n   * Check if this decoration is of type `type`.\n   *\n   * @param  {string|Array} type a type like `'line-number'`, `'line'`, etc.\n   *                             `type` can also be an Array of Strings, where\n   *                             it will return true if the decoration's type\n   *                             matches any in the array.\n   * @return {boolean} whether this decoration match the passed-in type\n   */\n  isType (type) {\n    return Decoration.isType(this.properties, type)\n  }\n\n  /**\n   * Returns the Decoration's properties.\n   *\n   * @return {Object} the decoration's properties\n   */\n  getProperties () {\n    return this.properties\n  }\n\n  /**\n   * Update the marker with new properties. Allows you to change the\n   * decoration's class.\n   *\n   * @param {Object} newProperties the new properties for the decoration\n   */\n  setProperties (newProperties) {\n    if (this.destroyed) { return }\n\n    let oldProperties = this.properties\n    this.properties = newProperties\n    this.properties.id = this.id\n\n    this.emitter.emit('did-change-properties', {oldProperties, newProperties})\n  }\n}\n"
  },
  {
    "__docId__": 40,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "idCounter",
    "memberof": "lib/decoration.js",
    "longname": "lib/decoration.js~idCounter",
    "access": null,
    "export": false,
    "importPath": "minimap/lib/decoration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "nextId",
    "memberof": "lib/decoration.js",
    "longname": "lib/decoration.js~nextId",
    "access": null,
    "export": false,
    "importPath": "minimap/lib/decoration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Decoration",
    "memberof": "lib/decoration.js",
    "longname": "lib/decoration.js~Decoration",
    "access": null,
    "export": true,
    "importPath": "minimap/lib/decoration.js",
    "importStyle": "Decoration",
    "description": "The `Decoration` class represents a decoration in the Minimap.\n\nIt has the same API than the `Decoration` class of a text editor.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 43,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isType",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration.isType",
    "access": null,
    "description": "Returns `true` if the passed-in decoration properties matches the\nspecified type.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "decorationProperties",
        "description": "the decoration properties to match"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "the decoration type to match"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether the decoration properties match the type"
    },
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#constructor",
    "access": null,
    "description": "Creates a new decoration.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Marker"
        ],
        "spread": false,
        "optional": false,
        "name": "marker",
        "description": "the target marker for the decoration"
      },
      {
        "nullable": null,
        "types": [
          "Minimap"
        ],
        "spread": false,
        "optional": false,
        "name": "minimap",
        "description": "the Minimap where the decoration will\n                          be displayed"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "the decoration's properties"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "marker",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#marker",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "minimap",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#minimap",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "emitter",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#emitter",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#id",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "properties",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#properties",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "destroyed",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#destroyed",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "markerDestroyDisposable",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#markerDestroyDisposable",
    "access": "private",
    "description": null,
    "lineNumber": 71,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#destroy",
    "access": null,
    "description": "Destroy this marker.\n\nIf you own the marker, you should use `Marker#destroy` which will destroy\nthis decoration.",
    "lineNumber": 82,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "markerDestroyDisposable",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#markerDestroyDisposable",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "destroyed",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#destroyed",
    "access": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isDestroyed",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#isDestroyed",
    "access": null,
    "description": "Returns whether this decoration is destroyed or not.",
    "lineNumber": 97,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether this decoration is destroyed or not"
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidChangeProperties",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#onDidChangeProperties",
    "access": null,
    "description": "Registers an event listener to the `did-change-properties` event.\n\nThis event is triggered when the decoration update method is called.",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(change:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call\n                                       when the event is triggered"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidDestroy",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#onDidDestroy",
    "access": null,
    "description": "Registers an event listener to the `did-destroy` event.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "function():void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call when the event\n                                   is triggered"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getId",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#getId",
    "access": null,
    "description": "An id unique across all Decoration objects.",
    "lineNumber": 128,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the decoration id"
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getMarker",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#getMarker",
    "access": null,
    "description": "Returns the marker associated with this Decoration.",
    "lineNumber": 135,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Marker"
      ],
      "spread": false,
      "description": "the decoration's marker"
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isType",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#isType",
    "access": null,
    "description": "Check if this decoration is of type `type`.",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "a type like `'line-number'`, `'line'`, etc.\n                            `type` can also be an Array of Strings, where\n                            it will return true if the decoration's type\n                            matches any in the array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether this decoration match the passed-in type"
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getProperties",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#getProperties",
    "access": null,
    "description": "Returns the Decoration's properties.",
    "lineNumber": 155,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the decoration's properties"
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setProperties",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#setProperties",
    "access": null,
    "description": "Update the marker with new properties. Allows you to change the\ndecoration's class.",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newProperties",
        "description": "the new properties for the decoration"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "properties",
    "memberof": "lib/decoration.js~Decoration",
    "longname": "lib/decoration.js~Decoration#properties",
    "access": null,
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/decorators/element.js",
    "memberof": null,
    "longname": "lib/decorators/element.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\nimport {registerOrUpdateElement} from 'atom-utils'\n\n/**\n * Generates a decorator function to convert a class into a custom element\n * through the `registerOrUpdateElement` method from `atom-utils`.\n *\n * The decorator will take care to return the generated element class so that\n * you can just export it directly as demonstrated below.\n *\n * As supported by the `registerOrUpdateElement` method, static member will\n * be available on the new class.\n *\n * **Note: As there's some limitations when modifying the prototype\n * of a custom element, if you need to inject element callbacks (like\n * `createdCallback`) through a mixin, the mixins should be included before\n * converting the class as a custom element. You'll be able to achieve that by\n * placing the `include` decorator after the `element` one as shown in the\n * second example.**\n *\n * @param  {string} elementName the node name of the element to register\n * @return {Function} the element class as returned by\n *                    `document.registerElement`\n * @example\n * @element('dummy-element-name')\n * export default class SomeClass {\n *   // ...\n * }\n *\n * @element('dummy-element-with-mixin')\n * @include(SomeMixin)\n * export default class SomeClass {\n *   // ...\n * }\n */\nexport default function element (elementName) {\n  return function (cls) {\n    let elementClass = registerOrUpdateElement(elementName, {\n      class: cls\n    })\n    return elementClass\n  }\n}\n"
  },
  {
    "__docId__": 65,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "element",
    "memberof": "lib/decorators/element.js",
    "longname": "lib/decorators/element.js~element",
    "access": null,
    "export": true,
    "importPath": "minimap/lib/decorators/element.js",
    "importStyle": "element",
    "description": "Generates a decorator function to convert a class into a custom element\nthrough the `registerOrUpdateElement` method from `atom-utils`.\n\nThe decorator will take care to return the generated element class so that\nyou can just export it directly as demonstrated below.\n\nAs supported by the `registerOrUpdateElement` method, static member will\nbe available on the new class.\n\n**Note: As there's some limitations when modifying the prototype\nof a custom element, if you need to inject element callbacks (like\n`createdCallback`) through a mixin, the mixins should be included before\nconverting the class as a custom element. You'll be able to achieve that by\nplacing the `include` decorator after the `element` one as shown in the\nsecond example.**",
    "examples": [
      "@element('dummy-element-name')\nexport default class SomeClass {\n  // ...\n}\n\n@element('dummy-element-with-mixin')\n@include(SomeMixin)\nexport default class SomeClass {\n  // ...\n}"
    ],
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "elementName",
        "description": "the node name of the element to register"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "the element class as returned by\n                   `document.registerElement`"
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/decorators/include.js",
    "memberof": null,
    "longname": "lib/decorators/include.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\n/**\n * Generates a decorator function to includes many `mixto` mixins into a class.\n *\n * @param  {...Mixin} mixins the mixins to include in the class\n * @return {function(cls:Function):Function} the decorator function that will\n *                                           include the specified mixins\n * @example\n * @include(SomeMixin)\n * export default class SomeClass {\n *   // ...\n * }\n */\nexport default function include (...mixins) {\n  return function performInclusion (cls) {\n    mixins.forEach((mixin) => { mixin.includeInto(cls) })\n    return cls\n  }\n}\n"
  },
  {
    "__docId__": 67,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "include",
    "memberof": "lib/decorators/include.js",
    "longname": "lib/decorators/include.js~include",
    "access": null,
    "export": true,
    "importPath": "minimap/lib/decorators/include.js",
    "importStyle": "include",
    "description": "Generates a decorator function to includes many `mixto` mixins into a class.",
    "examples": [
      "@include(SomeMixin)\nexport default class SomeClass {\n  // ...\n}"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Mixin"
        ],
        "spread": true,
        "optional": false,
        "name": "mixins",
        "description": "the mixins to include in the class"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function(cls:Function):Function"
      ],
      "spread": false,
      "description": "the decorator function that will\n                                          include the specified mixins"
    },
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/main.js",
    "memberof": null,
    "longname": "lib/main.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\nimport {Emitter, CompositeDisposable} from 'atom'\nimport include from './decorators/include'\nimport Minimap from './minimap'\nimport MinimapElement from './minimap-element'\nimport PluginManagement from './mixins/plugin-management'\nimport MinimapPluginGeneratorElement from './minimap-plugin-generator-element'\n\n/**\n * The `Minimap` package provides an eagle-eye view of text buffers.\n *\n * It also provides API for plugin packages that want to interact with the\n * minimap and be available to the user through the minimap settings.\n */\n@include(PluginManagement)\nclass Main {\n  /**\n   * Used only at export time.\n   *\n   * @access private\n   */\n  constructor () {\n    /**\n     * The activation state of the package.\n     *\n     * @type {boolean}\n     * @access private\n     */\n    this.active = false\n    /**\n     * The toggle state of the package.\n     *\n     * @type {boolean}\n     * @access private\n     */\n    this.toggled = false\n    /**\n     * The `Map` where Minimap instances are stored with the text editor they\n     * target as key.\n     *\n     * @type {Map}\n     * @access private\n     */\n    this.editorsMinimaps = null\n    /**\n     * The composite disposable that stores the package's subscriptions.\n     *\n     * @type {CompositeDisposable}\n     * @access private\n     */\n    this.subscriptions = null\n    /**\n     * The disposable that stores the package's commands subscription.\n     *\n     * @type {Disposable}\n     * @access private\n     */\n    this.subscriptionsOfCommands = null\n    /**\n     * The package's config object.\n     *\n     * @type {Object}\n     * @access private\n     */\n    this.config = require('./config-schema.json')\n    /**\n     * The package's events emitter.\n     *\n     * @type {Emitter}\n     * @access private\n     */\n    this.emitter = new Emitter()\n\n    this.initializePlugins()\n  }\n\n  /**\n   * Activates the minimap package.\n   */\n  activate () {\n    if (this.active) { return }\n\n    MinimapElement.registerViewProvider()\n\n    this.subscriptionsOfCommands = atom.commands.add('atom-workspace', {\n      'minimap:toggle': () => {\n        this.toggle()\n      },\n      'minimap:generate-coffee-plugin': () => {\n        this.generatePlugin('coffee')\n      },\n      'minimap:generate-javascript-plugin': () => {\n        this.generatePlugin('javascript')\n      },\n      'minimap:generate-babel-plugin': () => {\n        this.generatePlugin('babel')\n      }\n    })\n\n    this.editorsMinimaps = new Map()\n    this.subscriptions = new CompositeDisposable()\n    this.active = true\n\n    if (atom.config.get('minimap.autoToggle')) { this.toggle() }\n  }\n\n  /**\n   * Deactivates the minimap package.\n   */\n  deactivate () {\n    if (!this.active) { return }\n\n    this.deactivateAllPlugins()\n\n    if (this.editorsMinimaps) {\n      this.editorsMinimaps.forEach((value, key) => {\n        value.destroy()\n        this.editorsMinimaps.delete(key)\n      })\n    }\n\n    this.subscriptions.dispose()\n    this.subscriptions = null\n    this.subscriptionsOfCommands.dispose()\n    this.subscriptionsOfCommands = null\n    this.editorsMinimaps = undefined\n    this.toggled = false\n    this.active = false\n  }\n\n  /**\n   * Toggles the minimap display.\n   */\n  toggle () {\n    if (!this.active) { return }\n\n    if (this.toggled) {\n      this.toggled = false\n\n      if (this.editorsMinimaps) {\n        this.editorsMinimaps.forEach((value, key) => {\n          value.destroy()\n          this.editorsMinimaps.delete(key)\n        })\n      }\n      this.subscriptions.dispose()\n    } else {\n      this.toggled = true\n      this.initSubscriptions()\n    }\n  }\n\n  /**\n   * Opens the plugin generation view.\n   *\n   * @param  {string} template the name of the template to use\n   */\n  generatePlugin (template) {\n    var view = new MinimapPluginGeneratorElement()\n    view.template = template\n    view.attach()\n  }\n\n  /**\n   * Registers a callback to listen to the `did-activate` event of the package.\n   *\n   * @param  {function(event:Object):void} callback the callback function\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidActivate (callback) {\n    return this.emitter.on('did-activate', callback)\n  }\n\n  /**\n   * Registers a callback to listen to the `did-deactivate` event of the\n   * package.\n   *\n   * @param  {function(event:Object):void} callback the callback function\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidDeactivate (callback) {\n    return this.emitter.on('did-deactivate', callback)\n  }\n\n  /**\n   * Registers a callback to listen to the `did-create-minimap` event of the\n   * package.\n   *\n   * @param  {function(event:Object):void} callback the callback function\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidCreateMinimap (callback) {\n    return this.emitter.on('did-create-minimap', callback)\n  }\n\n  /**\n   * Registers a callback to listen to the `did-add-plugin` event of the\n   * package.\n   *\n   * @param  {function(event:Object):void} callback the callback function\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidAddPlugin (callback) {\n    return this.emitter.on('did-add-plugin', callback)\n  }\n\n  /**\n   * Registers a callback to listen to the `did-remove-plugin` event of the\n   * package.\n   *\n   * @param  {function(event:Object):void} callback the callback function\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidRemovePlugin (callback) {\n    return this.emitter.on('did-remove-plugin', callback)\n  }\n\n  /**\n   * Registers a callback to listen to the `did-activate-plugin` event of the\n   * package.\n   *\n   * @param  {function(event:Object):void} callback the callback function\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidActivatePlugin (callback) {\n    return this.emitter.on('did-activate-plugin', callback)\n  }\n\n  /**\n   * Registers a callback to listen to the `did-deactivate-plugin` event of the\n   * package.\n   *\n   * @param  {function(event:Object):void} callback the callback function\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidDeactivatePlugin (callback) {\n    return this.emitter.on('did-deactivate-plugin', callback)\n  }\n\n  /**\n   * Returns the `Minimap` class\n   *\n   * @return {Function} the `Minimap` class constructor\n   */\n  minimapClass () { return Minimap }\n\n  /**\n   * Returns the `Minimap` object associated to the passed-in\n   * `TextEditorElement`.\n   *\n   * @param  {TextEditorElement} editorElement a text editor element\n   * @return {Minimap} the associated minimap\n   */\n  minimapForEditorElement (editorElement) {\n    if (!editorElement) { return }\n    return this.minimapForEditor(editorElement.getModel())\n  }\n\n  /**\n   * Returns the `Minimap` object associated to the passed-in\n   * `TextEditor`.\n   *\n   * @param  {TextEditor} textEditor a text editor\n   * @return {Minimap} the associated minimap\n   */\n  minimapForEditor (textEditor) {\n    if (!textEditor) { return }\n\n    let minimap = this.editorsMinimaps.get(textEditor)\n\n    if (!minimap) {\n      minimap = new Minimap({textEditor})\n      this.editorsMinimaps.set(textEditor, minimap)\n\n      var editorSubscription = textEditor.onDidDestroy(() => {\n        let minimaps = this.editorsMinimaps\n        if (minimaps) { minimaps.delete(textEditor) }\n        editorSubscription.dispose()\n      })\n    }\n\n    return minimap\n  }\n\n  /**\n   * Returns a new stand-alone {Minimap} for the passed-in `TextEditor`.\n   *\n   * @param  {TextEditor} textEditor a text editor instance to create\n   *                                 a minimap for\n   * @return {Minimap} a new stand-alone Minimap for the passed-in editor\n   */\n  standAloneMinimapForEditor (textEditor) {\n    if (!textEditor) { return }\n\n    return new Minimap({\n      textEditor: textEditor,\n      standAlone: true\n    })\n  }\n\n  /**\n   * Returns the `Minimap` associated to the active `TextEditor`.\n   *\n   * @return {Minimap} the active Minimap\n   */\n  getActiveMinimap () {\n    return this.minimapForEditor(atom.workspace.getActiveTextEditor())\n  }\n\n  /**\n   * Calls a function for each present and future minimaps.\n   *\n   * @param  {function(minimap:Minimap):void} iterator a function to call with\n   *                                                   the existing and future\n   *                                                   minimaps\n   * @return {Disposable} a disposable to unregister the observer\n   */\n  observeMinimaps (iterator) {\n    if (!iterator) { return }\n\n    if (this.editorsMinimaps) {\n      this.editorsMinimaps.forEach((minimap) => { iterator(minimap) })\n    }\n    return this.onDidCreateMinimap((minimap) => { iterator(minimap) })\n  }\n\n  /**\n   * Registers to the `observeTextEditors` method.\n   *\n   * @access private\n   */\n  initSubscriptions () {\n    this.subscriptions.add(atom.workspace.observeTextEditors((textEditor) => {\n      let minimap = this.minimapForEditor(textEditor)\n      let minimapElement = atom.views.getView(minimap)\n\n      this.emitter.emit('did-create-minimap', minimap)\n\n      minimapElement.attach()\n    }))\n  }\n}\n\n/**\n * The exposed instance of the `Main` class.\n *\n * @access private\n */\nexport default new Main()\n"
  },
  {
    "__docId__": 69,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Main",
    "memberof": "lib/main.js",
    "longname": "lib/main.js~Main",
    "access": null,
    "export": true,
    "importPath": "minimap/lib/main.js",
    "importStyle": null,
    "description": "The `Minimap` package provides an eagle-eye view of text buffers.\n\nIt also provides API for plugin packages that want to interact with the\nminimap and be available to the user through the minimap settings.",
    "lineNumber": 17,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 70,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#constructor",
    "access": "private",
    "description": "Used only at export time.",
    "lineNumber": 23,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "active",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#active",
    "access": "private",
    "description": "The activation state of the package.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "toggled",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#toggled",
    "access": "private",
    "description": "The toggle state of the package.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "editorsMinimaps",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#editorsMinimaps",
    "access": "private",
    "description": "The `Map` where Minimap instances are stored with the text editor they\ntarget as key.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subscriptions",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#subscriptions",
    "access": "private",
    "description": "The composite disposable that stores the package's subscriptions.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "CompositeDisposable"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subscriptionsOfCommands",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#subscriptionsOfCommands",
    "access": "private",
    "description": "The disposable that stores the package's commands subscription.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#config",
    "access": "private",
    "description": "The package's config object.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "emitter",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#emitter",
    "access": "private",
    "description": "The package's events emitter.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "Emitter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "activate",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#activate",
    "access": null,
    "description": "Activates the minimap package.",
    "lineNumber": 81,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subscriptionsOfCommands",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#subscriptionsOfCommands",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "editorsMinimaps",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#editorsMinimaps",
    "access": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subscriptions",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#subscriptions",
    "access": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "active",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#active",
    "access": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deactivate",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#deactivate",
    "access": null,
    "description": "Deactivates the minimap package.",
    "lineNumber": 111,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subscriptions",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#subscriptions",
    "access": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subscriptionsOfCommands",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#subscriptionsOfCommands",
    "access": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "editorsMinimaps",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#editorsMinimaps",
    "access": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "toggled",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#toggled",
    "access": null,
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "active",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#active",
    "access": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toggle",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#toggle",
    "access": null,
    "description": "Toggles the minimap display.",
    "lineNumber": 135,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "toggled",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#toggled",
    "access": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "toggled",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#toggled",
    "access": null,
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "generatePlugin",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#generatePlugin",
    "access": null,
    "description": "Opens the plugin generation view.",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": "the name of the template to use"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidActivate",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#onDidActivate",
    "access": null,
    "description": "Registers a callback to listen to the `did-activate` event of the package.",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(event:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidDeactivate",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#onDidDeactivate",
    "access": null,
    "description": "Registers a callback to listen to the `did-deactivate` event of the\npackage.",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(event:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidCreateMinimap",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#onDidCreateMinimap",
    "access": null,
    "description": "Registers a callback to listen to the `did-create-minimap` event of the\npackage.",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(event:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidAddPlugin",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#onDidAddPlugin",
    "access": null,
    "description": "Registers a callback to listen to the `did-add-plugin` event of the\npackage.",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(event:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidRemovePlugin",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#onDidRemovePlugin",
    "access": null,
    "description": "Registers a callback to listen to the `did-remove-plugin` event of the\npackage.",
    "lineNumber": 215,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(event:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidActivatePlugin",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#onDidActivatePlugin",
    "access": null,
    "description": "Registers a callback to listen to the `did-activate-plugin` event of the\npackage.",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(event:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidDeactivatePlugin",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#onDidDeactivatePlugin",
    "access": null,
    "description": "Registers a callback to listen to the `did-deactivate-plugin` event of the\npackage.",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(event:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the callback function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 100,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "minimapClass",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#minimapClass",
    "access": null,
    "description": "Returns the `Minimap` class",
    "lineNumber": 246,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "the `Minimap` class constructor"
    },
    "generator": false
  },
  {
    "__docId__": 101,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "minimapForEditorElement",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#minimapForEditorElement",
    "access": null,
    "description": "Returns the `Minimap` object associated to the passed-in\n`TextEditorElement`.",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "TextEditorElement"
        ],
        "spread": false,
        "optional": false,
        "name": "editorElement",
        "description": "a text editor element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Minimap"
      ],
      "spread": false,
      "description": "the associated minimap"
    },
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "minimapForEditor",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#minimapForEditor",
    "access": null,
    "description": "Returns the `Minimap` object associated to the passed-in\n`TextEditor`.",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "TextEditor"
        ],
        "spread": false,
        "optional": false,
        "name": "textEditor",
        "description": "a text editor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Minimap"
      ],
      "spread": false,
      "description": "the associated minimap"
    },
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "standAloneMinimapForEditor",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#standAloneMinimapForEditor",
    "access": null,
    "description": "Returns a new stand-alone {Minimap} for the passed-in `TextEditor`.",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "TextEditor"
        ],
        "spread": false,
        "optional": false,
        "name": "textEditor",
        "description": "a text editor instance to create\n                                a minimap for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Minimap"
      ],
      "spread": false,
      "description": "a new stand-alone Minimap for the passed-in editor"
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getActiveMinimap",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#getActiveMinimap",
    "access": null,
    "description": "Returns the `Minimap` associated to the active `TextEditor`.",
    "lineNumber": 307,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Minimap"
      ],
      "spread": false,
      "description": "the active Minimap"
    },
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "observeMinimaps",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#observeMinimaps",
    "access": null,
    "description": "Calls a function for each present and future minimaps.",
    "lineNumber": 319,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(minimap:Minimap):void"
        ],
        "spread": false,
        "optional": false,
        "name": "iterator",
        "description": "a function to call with\n                                                  the existing and future\n                                                  minimaps"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to unregister the observer"
    },
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initSubscriptions",
    "memberof": "lib/main.js~Main",
    "longname": "lib/main.js~Main#initSubscriptions",
    "access": "private",
    "description": "Registers to the `observeTextEditors` method.",
    "lineNumber": 333,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "main",
    "memberof": "lib/main.js",
    "longname": "lib/main.js~main",
    "access": "private",
    "export": true,
    "importPath": "minimap/lib/main.js",
    "importStyle": "main",
    "description": "The exposed instance of the `Main` class.",
    "lineNumber": 350,
    "type": {
      "types": [
        "lib/main.js~Main"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/minimap-element.js",
    "memberof": null,
    "longname": "lib/minimap-element.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\nimport {CompositeDisposable, Disposable} from 'atom'\nimport {EventsDelegation, AncestorsMethods} from 'atom-utils'\nimport include from './decorators/include'\nimport element from './decorators/element'\nimport DOMStylesReader from './mixins/dom-styles-reader'\nimport CanvasDrawer from './mixins/canvas-drawer'\nimport MinimapQuickSettingsElement from './minimap-quick-settings-element'\n\nconst SPEC_MODE = atom.inSpecMode()\n\n/**\n * Public: The MinimapElement is the view meant to render a {@link Minimap}\n * instance in the DOM.\n *\n * You can retrieve the MinimapElement associated to a Minimap\n * using the `atom.views.getView` method.\n *\n * Note that most interactions with the Minimap package is done through the\n * Minimap model so you should never have to access MinimapElement\n * instances.\n *\n * @example\n * let minimapElement = atom.views.getView(minimap)\n */\n@element('atom-text-editor-minimap')\n@include(DOMStylesReader, CanvasDrawer, EventsDelegation, AncestorsMethods)\nexport default class MinimapElement {\n\n  /**\n   * The method that registers the MinimapElement factory in the\n   * `atom.views` registry with the Minimap model.\n   */\n  static registerViewProvider () {\n    atom.views.addViewProvider(require('./minimap'), function (model) {\n      let element = new MinimapElement()\n      element.setModel(model)\n      return element\n    })\n  }\n\n  //    ##     ##  #######   #######  ##    ##  ######\n  //    ##     ## ##     ## ##     ## ##   ##  ##    ##\n  //    ##     ## ##     ## ##     ## ##  ##   ##\n  //    ######### ##     ## ##     ## #####     ######\n  //    ##     ## ##     ## ##     ## ##  ##         ##\n  //    ##     ## ##     ## ##     ## ##   ##  ##    ##\n  //    ##     ##  #######   #######  ##    ##  ######\n\n  /**\n   * DOM callback invoked when a new MinimapElement is created.\n   *\n   * @access private\n   */\n  createdCallback () {\n    // Core properties\n\n    /**\n     * @access private\n     */\n    this.minimap = undefined\n    /**\n     * @access private\n     */\n    this.editorElement = undefined\n    /**\n     * @access private\n     */\n    this.width = undefined\n    /**\n     * @access private\n     */\n    this.height = undefined\n\n    // Subscriptions\n\n    /**\n     * @access private\n     */\n    this.subscriptions = new CompositeDisposable()\n    /**\n     * @access private\n     */\n    this.visibleAreaSubscription = undefined\n    /**\n     * @access private\n     */\n    this.quickSettingsSubscription = undefined\n    /**\n     * @access private\n     */\n    this.dragSubscription = undefined\n    /**\n     * @access private\n     */\n    this.openQuickSettingSubscription = undefined\n\n    // Configs\n\n    /**\n    * @access private\n    */\n    this.displayMinimapOnLeft = false\n    /**\n    * @access private\n    */\n    this.minimapScrollIndicator = undefined\n    /**\n    * @access private\n    */\n    this.displayMinimapOnLeft = undefined\n    /**\n    * @access private\n    */\n    this.displayPluginsControls = undefined\n    /**\n    * @access private\n    */\n    this.textOpacity = undefined\n    /**\n    * @access private\n    */\n    this.displayCodeHighlights = undefined\n    /**\n    * @access private\n    */\n    this.adjustToSoftWrap = undefined\n    /**\n    * @access private\n    */\n    this.useHardwareAcceleration = undefined\n    /**\n    * @access private\n    */\n    this.absoluteMode = undefined\n\n    // Elements\n\n    /**\n     * @access private\n     */\n    this.shadowRoot = undefined\n    /**\n     * @access private\n     */\n    this.visibleArea = undefined\n    /**\n     * @access private\n     */\n    this.controls = undefined\n    /**\n     * @access private\n     */\n    this.scrollIndicator = undefined\n    /**\n     * @access private\n     */\n    this.openQuickSettings = undefined\n    /**\n     * @access private\n     */\n    this.quickSettingsElement = undefined\n\n    // States\n\n    /**\n    * @access private\n    */\n    this.attached = undefined\n    /**\n    * @access private\n    */\n    this.attachedToTextEditor = undefined\n    /**\n    * @access private\n    */\n    this.standAlone = undefined\n    /**\n     * @access private\n     */\n    this.wasVisible = undefined\n\n    // Other\n\n    /**\n     * @access private\n     */\n    this.offscreenFirstRow = undefined\n    /**\n     * @access private\n     */\n    this.offscreenLastRow = undefined\n    /**\n     * @access private\n     */\n    this.frameRequested = undefined\n    /**\n     * @access private\n     */\n    this.flexBasis = undefined\n\n    this.initializeContent()\n\n    return this.observeConfig({\n      'minimap.displayMinimapOnLeft': (displayMinimapOnLeft) => {\n        this.displayMinimapOnLeft = displayMinimapOnLeft\n\n        this.updateMinimapFlexPosition()\n      },\n\n      'minimap.minimapScrollIndicator': (minimapScrollIndicator) => {\n        this.minimapScrollIndicator = minimapScrollIndicator\n\n        if (this.minimapScrollIndicator && !(this.scrollIndicator != null) && !this.standAlone) {\n          this.initializeScrollIndicator()\n        } else if ((this.scrollIndicator != null)) {\n          this.disposeScrollIndicator()\n        }\n\n        if (this.attached) { this.requestUpdate() }\n      },\n\n      'minimap.displayPluginsControls': (displayPluginsControls) => {\n        this.displayPluginsControls = displayPluginsControls\n\n        if (this.displayPluginsControls && !(this.openQuickSettings != null) && !this.standAlone) {\n          this.initializeOpenQuickSettings()\n        } else if ((this.openQuickSettings != null)) {\n          this.disposeOpenQuickSettings()\n        }\n      },\n\n      'minimap.textOpacity': (textOpacity) => {\n        this.textOpacity = textOpacity\n\n        if (this.attached) { this.requestForcedUpdate() }\n      },\n\n      'minimap.displayCodeHighlights': (displayCodeHighlights) => {\n        this.displayCodeHighlights = displayCodeHighlights\n\n        if (this.attached) { this.requestForcedUpdate() }\n      },\n\n      'minimap.adjustMinimapWidthToSoftWrap': (adjustToSoftWrap) => {\n        this.adjustToSoftWrap = adjustToSoftWrap\n\n        if (this.attached) { this.measureHeightAndWidth() }\n      },\n\n      'minimap.useHardwareAcceleration': (useHardwareAcceleration) => {\n        this.useHardwareAcceleration = useHardwareAcceleration\n\n        if (this.attached) { this.requestUpdate() }\n      },\n\n      'minimap.absoluteMode': (absoluteMode) => {\n        this.absoluteMode = absoluteMode\n\n        return this.classList.toggle('absolute', this.absoluteMode)\n      },\n\n      'editor.preferredLineLength': () => {\n        if (this.attached) { this.measureHeightAndWidth() }\n      },\n\n      'editor.softWrap': () => {\n        if (this.attached) { this.requestUpdate() }\n      },\n\n      'editor.softWrapAtPreferredLineLength': () => {\n        if (this.attached) { this.requestUpdate() }\n      }\n    })\n  }\n\n  /**\n   * DOM callback invoked when a new MinimapElement is attached to the DOM.\n   *\n   * @access private\n   */\n  attachedCallback () {\n    this.subscriptions.add(atom.views.pollDocument(() => { this.pollDOM() }))\n    this.measureHeightAndWidth()\n    this.updateMinimapFlexPosition()\n    this.attached = true\n    this.attachedToTextEditor = this.parentNode === this.getTextEditorElementRoot()\n\n    /*\n      We use `atom.styles.onDidAddStyleElement` instead of\n      `atom.themes.onDidChangeActiveThemes`.\n      Why? Currently, The style element will be removed first, and then re-added\n      and the `change` event has not be triggered in the process.\n    */\n    return this.subscriptions.add(atom.styles.onDidAddStyleElement(() => {\n      this.invalidateDOMStylesCache()\n      this.requestForcedUpdate()\n    }))\n  }\n\n  /**\n   * DOM callback invoked when a new MinimapElement is detached from the DOM.\n   *\n   * @access private\n   */\n  detachedCallback () {\n    this.attached = false\n  }\n\n  //       ###    ######## ########    ###     ######  ##     ##\n  //      ## ##      ##       ##      ## ##   ##    ## ##     ##\n  //     ##   ##     ##       ##     ##   ##  ##       ##     ##\n  //    ##     ##    ##       ##    ##     ## ##       #########\n  //    #########    ##       ##    ######### ##       ##     ##\n  //    ##     ##    ##       ##    ##     ## ##    ## ##     ##\n  //    ##     ##    ##       ##    ##     ##  ######  ##     ##\n\n  /**\n   * Returns whether the MinimapElement is currently visible on screen or not.\n   *\n   * The visibility of the minimap is defined by testing the size of the offset\n   * width and height of the element.\n   *\n   * @return {boolean} whether the MinimapElement is currently visible or not\n   */\n  isVisible () { return this.offsetWidth > 0 || this.offsetHeight > 0 }\n\n  /**\n   * Attaches the MinimapElement to the DOM.\n   *\n   * The position at which the element is attached is defined by the\n   * `displayMinimapOnLeft` setting.\n   *\n   * @param  {HTMLElement} [parent] the DOM node where attaching the minimap\n   *                                element\n   */\n  attach (parent) {\n    if (this.attached) { return }\n    (parent || this.getTextEditorElementRoot()).appendChild(this)\n  }\n\n  /**\n   * Detaches the MinimapElement from the DOM.\n   */\n  detach () {\n    if (!this.attached || this.parentNode == null) { return }\n    this.parentNode.removeChild(this)\n  }\n\n  /**\n   * Toggles the minimap left/right position based on the value of the\n   * `displayMinimapOnLeft` setting.\n   *\n   * @access private\n   */\n  updateMinimapFlexPosition () {\n    this.classList.toggle('left', this.displayMinimapOnLeft)\n  }\n\n  /**\n   * Destroys this MinimapElement\n   */\n  destroy () {\n    this.subscriptions.dispose()\n    this.detach()\n    this.minimap = null\n  }\n\n  //     ######   #######  ##    ## ######## ######## ##    ## ########\n  //    ##    ## ##     ## ###   ##    ##    ##       ###   ##    ##\n  //    ##       ##     ## ####  ##    ##    ##       ####  ##    ##\n  //    ##       ##     ## ## ## ##    ##    ######   ## ## ##    ##\n  //    ##       ##     ## ##  ####    ##    ##       ##  ####    ##\n  //    ##    ## ##     ## ##   ###    ##    ##       ##   ###    ##\n  //     ######   #######  ##    ##    ##    ######## ##    ##    ##\n\n  /**\n   * Creates the content of the MinimapElement and attaches the mouse control\n   * event listeners.\n   *\n   * @access private\n   */\n  initializeContent () {\n    this.initializeCanvas()\n\n    this.shadowRoot = this.createShadowRoot()\n    this.shadowRoot.appendChild(this.canvas)\n\n    this.createVisibleArea()\n    this.createControls()\n\n    this.subscriptions.add(this.subscribeTo(this, {\n      'mousewheel': (e) => {\n        if (!this.standAlone) { this.relayMousewheelEvent(e) }\n      }\n    }))\n\n    this.subscriptions.add(this.subscribeTo(this.canvas, {\n      'mousedown': (e) => { this.mousePressedOverCanvas(e) }\n    }))\n  }\n\n  /**\n   * Initializes the visible area div.\n   *\n   * @access private\n   */\n  createVisibleArea () {\n    if (this.visibleArea) { return }\n\n    this.visibleArea = document.createElement('div')\n    this.visibleArea.classList.add('minimap-visible-area')\n    this.shadowRoot.appendChild(this.visibleArea)\n    this.visibleAreaSubscription = this.subscribeTo(this.visibleArea, {\n      'mousedown': (e) => { this.startDrag(e) },\n      'touchstart': (e) => { this.startDrag(e) }\n    })\n\n    this.subscriptions.add(this.visibleAreaSubscription)\n  }\n\n  /**\n   * Removes the visible area div.\n   *\n   * @access private\n   */\n  removeVisibleArea () {\n    if (!this.visibleArea) { return }\n\n    this.subscriptions.remove(this.visibleAreaSubscription)\n    this.visibleAreaSubscription.dispose()\n    this.shadowRoot.removeChild(this.visibleArea)\n    delete this.visibleArea\n  }\n\n  /**\n   * Creates the controls container div.\n   *\n   * @access private\n   */\n  createControls () {\n    if (this.controls || this.standAlone) { return }\n\n    this.controls = document.createElement('div')\n    this.controls.classList.add('minimap-controls')\n    this.shadowRoot.appendChild(this.controls)\n  }\n\n  /**\n   * Removes the controls container div.\n   *\n   * @access private\n   */\n  removeControls () {\n    if (!this.controls) { return }\n\n    this.shadowRoot.removeChild(this.controls)\n    delete this.controls\n  }\n\n  /**\n   * Initializes the scroll indicator div when the `minimapScrollIndicator`\n   * settings is enabled.\n   *\n   * @access private\n   */\n  initializeScrollIndicator () {\n    if (this.scrollIndicator || this.standAlone) { return }\n\n    this.scrollIndicator = document.createElement('div')\n    this.scrollIndicator.classList.add('minimap-scroll-indicator')\n    this.controls.appendChild(this.scrollIndicator)\n  }\n\n  /**\n   * Disposes the scroll indicator div when the `minimapScrollIndicator`\n   * settings is disabled.\n   *\n   * @access private\n   */\n  disposeScrollIndicator () {\n    if (!this.scrollIndicator) { return }\n\n    this.controls.removeChild(this.scrollIndicator)\n    delete this.scrollIndicator\n  }\n\n  /**\n   * Initializes the quick settings openener div when the\n   * `displayPluginsControls` setting is enabled.\n   *\n   * @access private\n   */\n  initializeOpenQuickSettings () {\n    if (this.openQuickSettings || this.standAlone) { return }\n\n    this.openQuickSettings = document.createElement('div')\n    this.openQuickSettings.classList.add('open-minimap-quick-settings')\n    this.controls.appendChild(this.openQuickSettings)\n\n    this.openQuickSettingSubscription = this.subscribeTo(this.openQuickSettings, {\n      'mousedown': (e) => {\n        e.preventDefault()\n        e.stopPropagation()\n\n        if ((this.quickSettingsElement != null)) {\n          this.quickSettingsElement.destroy()\n          this.quickSettingsSubscription.dispose()\n        } else {\n          this.quickSettingsElement = new MinimapQuickSettingsElement()\n          this.quickSettingsElement.setModel(this)\n          this.quickSettingsSubscription = this.quickSettingsElement.onDidDestroy(() => {\n            this.quickSettingsElement = null\n          })\n\n          let {top, left, right} = this.canvas.getBoundingClientRect()\n          this.quickSettingsElement.style.top = top + 'px'\n          this.quickSettingsElement.attach()\n\n          if (this.displayMinimapOnLeft) {\n            this.quickSettingsElement.style.left = (right) + 'px'\n          } else {\n            this.quickSettingsElement.style.left = (left - this.quickSettingsElement.clientWidth) + 'px'\n          }\n        }\n      }\n    })\n  }\n\n  /**\n   * Disposes the quick settings openener div when the `displayPluginsControls`\n   * setting is disabled.\n   *\n   * @access private\n   */\n  disposeOpenQuickSettings () {\n    if (!this.openQuickSettings) { return }\n\n    this.controls.removeChild(this.openQuickSettings)\n    this.openQuickSettingSubscription.dispose()\n    delete this.openQuickSettings\n  }\n\n  /**\n   * Returns the target `TextEditor` of the Minimap.\n   *\n   * @return {TextEditor} the minimap's text editor\n   */\n  getTextEditor () { return this.minimap.getTextEditor() }\n\n  /**\n   * Returns the `TextEditorElement` for the Minimap's `TextEditor`.\n   *\n   * @return {TextEditorElement} the minimap's text editor element\n   */\n  getTextEditorElement () {\n    if (this.editorElement) { return this.editorElement }\n\n    this.editorElement = atom.views.getView(this.getTextEditor())\n    return this.editorElement\n  }\n\n  /**\n   * Returns the root of the `TextEditorElement` content.\n   *\n   * This method is mostly used to ensure compatibility with the `shadowDom`\n   * setting.\n   *\n   * @return {HTMLElement} the root of the `TextEditorElement` content\n   */\n  getTextEditorElementRoot () {\n    let editorElement = this.getTextEditorElement()\n\n    if (editorElement.shadowRoot) {\n      return editorElement.shadowRoot\n    } else {\n      return editorElement\n    }\n  }\n\n  /**\n   * Returns the root where to inject the dummy node used to read DOM styles.\n   *\n   * @param  {boolean} shadowRoot whether to use the text editor shadow DOM\n   *                              or not\n   * @return {HTMLElement} the root node where appending the dummy node\n   * @access private\n   */\n  getDummyDOMRoot (shadowRoot) {\n    if (shadowRoot) {\n      return this.getTextEditorElementRoot()\n    } else {\n      return this.getTextEditorElement()\n    }\n  }\n\n  //    ##     ##  #######  ########  ######## ##\n  //    ###   ### ##     ## ##     ## ##       ##\n  //    #### #### ##     ## ##     ## ##       ##\n  //    ## ### ## ##     ## ##     ## ######   ##\n  //    ##     ## ##     ## ##     ## ##       ##\n  //    ##     ## ##     ## ##     ## ##       ##\n  //    ##     ##  #######  ########  ######## ########\n\n  /**\n   * Returns the Minimap for which this MinimapElement was created.\n   *\n   * @return {Minimap} this element's Minimap\n   */\n  getModel () { return this.minimap }\n\n  /**\n   * Defines the Minimap model for this MinimapElement instance.\n   *\n   * @param  {Minimap} minimap the Minimap model for this instance.\n   * @return {Minimap} this element's Minimap\n   */\n  setModel (minimap) {\n    this.minimap = minimap\n    this.subscriptions.add(this.minimap.onDidChangeScrollTop(() => {\n      this.requestUpdate()\n    }))\n    this.subscriptions.add(this.minimap.onDidChangeScrollLeft(() => {\n      this.requestUpdate()\n    }))\n    this.subscriptions.add(this.minimap.onDidDestroy(() => {\n      this.destroy()\n    }))\n    this.subscriptions.add(this.minimap.onDidChangeConfig(() => {\n      if (this.attached) { return this.requestForcedUpdate() }\n    }))\n\n    this.subscriptions.add(this.minimap.onDidChangeStandAlone(() => {\n      this.setStandAlone(this.minimap.isStandAlone())\n      this.requestUpdate()\n    }))\n\n    this.subscriptions.add(this.minimap.onDidChange((change) => {\n      this.pendingChanges.push(change)\n      this.requestUpdate()\n    }))\n\n    this.setStandAlone(this.minimap.isStandAlone())\n\n    if (this.width != null && this.height != null) {\n      this.minimap.setScreenHeightAndWidth(this.height, this.width)\n    }\n\n    return this.minimap\n  }\n\n  /**\n   * Sets the stand-alone mode for this MinimapElement.\n   *\n   * @param {boolean} standAlone the new mode for this MinimapElement\n   */\n  setStandAlone (standAlone) {\n    this.standAlone = standAlone\n\n    if (this.standAlone) {\n      this.setAttribute('stand-alone', true)\n      this.disposeScrollIndicator()\n      this.disposeOpenQuickSettings()\n      this.removeControls()\n      this.removeVisibleArea()\n    } else {\n      this.removeAttribute('stand-alone')\n      this.createVisibleArea()\n      this.createControls()\n      if (this.minimapScrollIndicator) { this.initializeScrollIndicator() }\n      if (this.displayPluginsControls) { this.initializeOpenQuickSettings() }\n    }\n  }\n\n  //    ##     ## ########  ########     ###    ######## ########\n  //    ##     ## ##     ## ##     ##   ## ##      ##    ##\n  //    ##     ## ##     ## ##     ##  ##   ##     ##    ##\n  //    ##     ## ########  ##     ## ##     ##    ##    ######\n  //    ##     ## ##        ##     ## #########    ##    ##\n  //    ##     ## ##        ##     ## ##     ##    ##    ##\n  //     #######  ##        ########  ##     ##    ##    ########\n\n  /**\n   * Requests an update to be performed on the next frame.\n   */\n  requestUpdate () {\n    if (this.frameRequested) { return }\n\n    this.frameRequested = true\n    requestAnimationFrame(() => {\n      this.update()\n      this.frameRequested = false\n    })\n  }\n\n  /**\n   * Requests an update to be performed on the next frame that will completely\n   * redraw the minimap.\n   */\n  requestForcedUpdate () {\n    this.offscreenFirstRow = null\n    this.offscreenLastRow = null\n    this.requestUpdate()\n  }\n\n  /**\n   * Performs the actual MinimapElement update.\n   *\n   * @access private\n   */\n  update () {\n    if (!(this.attached && this.isVisible() && this.minimap)) { return }\n    let minimap = this.minimap\n    minimap.enableCache()\n\n    let visibleAreaLeft = minimap.getTextEditorScaledScrollLeft()\n    let visibleAreaTop = minimap.getTextEditorScaledScrollTop() - minimap.getScrollTop()\n    let visibleWidth = Math.min(this.canvas.width / devicePixelRatio, this.width)\n\n    if (this.adjustToSoftWrap && this.flexBasis) {\n      this.style.flexBasis = this.flexBasis + 'px'\n    } else {\n      this.style.flexBasis = null\n    }\n\n    if (SPEC_MODE) {\n      this.applyStyles(this.visibleArea, {\n        width: visibleWidth + 'px',\n        height: minimap.getTextEditorScaledHeight() + 'px',\n        top: visibleAreaTop + 'px',\n        left: visibleAreaLeft + 'px'\n      })\n    } else {\n      this.applyStyles(this.visibleArea, {\n        width: visibleWidth + 'px',\n        height: minimap.getTextEditorScaledHeight() + 'px',\n        transform: this.makeTranslate(visibleAreaLeft, visibleAreaTop)\n      })\n    }\n\n    this.applyStyles(this.controls, {width: visibleWidth + 'px'})\n\n    let canvasTop = minimap.getFirstVisibleScreenRow() * minimap.getLineHeight() - minimap.getScrollTop()\n\n    let canvasTransform = this.makeTranslate(0, canvasTop)\n    if (devicePixelRatio !== 1) {\n      canvasTransform += ' ' + this.makeScale(1 / devicePixelRatio)\n    }\n\n    if (SPEC_MODE) {\n      this.applyStyles(this.canvas, {top: canvasTop + 'px'})\n    } else {\n      this.applyStyles(this.canvas, {transform: canvasTransform})\n    }\n\n    if (this.minimapScrollIndicator && minimap.canScroll() && !this.scrollIndicator) {\n      this.initializeScrollIndicator()\n    }\n\n    if (this.scrollIndicator != null) {\n      let minimapScreenHeight = minimap.getScreenHeight()\n      let indicatorHeight = minimapScreenHeight * (minimapScreenHeight / minimap.getHeight())\n      let indicatorScroll = (minimapScreenHeight - indicatorHeight) * minimap.getCapedTextEditorScrollRatio()\n\n      if (SPEC_MODE) {\n        this.applyStyles(this.scrollIndicator, {\n          height: indicatorHeight + 'px',\n          top: indicatorScroll + 'px'\n        })\n      } else {\n        this.applyStyles(this.scrollIndicator, {\n          height: indicatorHeight + 'px',\n          transform: this.makeTranslate(0, indicatorScroll)\n        })\n      }\n\n      if (!minimap.canScroll()) { this.disposeScrollIndicator() }\n    }\n\n    this.updateCanvas()\n    minimap.clearCache()\n  }\n\n  /**\n   * Defines whether to render the code highlights or not.\n   *\n   * @param {Boolean} displayCodeHighlights whether to render the code\n   *                                        highlights or not\n   */\n  setDisplayCodeHighlights (displayCodeHighlights) {\n    this.displayCodeHighlights = displayCodeHighlights\n    if (this.attached) { this.requestForcedUpdate() }\n  }\n\n  /**\n   * Polling callback used to detect visibility and size changes.\n   *\n   * @access private\n   */\n  pollDOM () {\n    let visibilityChanged = this.checkForVisibilityChange()\n    if (this.isVisible()) {\n      if (!this.wasVisible) { this.requestForcedUpdate() }\n\n      this.measureHeightAndWidth(visibilityChanged, false)\n    }\n  }\n\n  /**\n   * A method that checks for visibility changes in the MinimapElement.\n   * The method returns `true` when the visibility changed from visible to\n   * hidden or from hidden to visible.\n   *\n   * @return {boolean} whether the visibility changed or not since the last call\n   * @access private\n   */\n  checkForVisibilityChange () {\n    if (this.isVisible()) {\n      if (this.wasVisible) {\n        return false\n      } else {\n        this.wasVisible = true\n        return this.wasVisible\n      }\n    } else {\n      if (this.wasVisible) {\n        this.wasVisible = false\n        return true\n      } else {\n        this.wasVisible = false\n        return this.wasVisible\n      }\n    }\n  }\n\n  /**\n   * A method used to measure the size of the MinimapElement and update internal\n   * components based on the new size.\n   *\n   * @param  {boolean} visibilityChanged did the visibility changed since last\n   *                                     measurement\n   * @param  {[type]} [forceUpdate=true] forces the update even when no changes\n   *                                     were detected\n   * @access private\n   */\n  measureHeightAndWidth (visibilityChanged, forceUpdate = true) {\n    if (!this.minimap) { return }\n\n    let wasResized = this.width !== this.clientWidth || this.height !== this.clientHeight\n\n    this.height = this.clientHeight\n    this.width = this.clientWidth\n    let canvasWidth = this.width\n\n    if ((this.minimap != null)) { this.minimap.setScreenHeightAndWidth(this.height, this.width) }\n\n    if (wasResized || visibilityChanged || forceUpdate) { this.requestForcedUpdate() }\n\n    if (!this.isVisible()) { return }\n\n    if (wasResized || forceUpdate) {\n      if (this.adjustToSoftWrap) {\n        let lineLength = atom.config.get('editor.preferredLineLength')\n        let softWrap = atom.config.get('editor.softWrap')\n        let softWrapAtPreferredLineLength = atom.config.get('editor.softWrapAtPreferredLineLength')\n        let width = lineLength * this.minimap.getCharWidth()\n\n        if (softWrap && softWrapAtPreferredLineLength && lineLength && width <= this.width) {\n          this.flexBasis = width\n          canvasWidth = width\n        } else {\n          delete this.flexBasis\n        }\n      } else {\n        delete this.flexBasis\n      }\n\n      if (canvasWidth !== this.canvas.width || this.height !== this.canvas.height) {\n        this.canvas.width = canvasWidth * devicePixelRatio\n        this.canvas.height = (this.height + this.minimap.getLineHeight()) * devicePixelRatio\n      }\n    }\n  }\n\n  //    ######## ##     ## ######## ##    ## ########  ######\n  //    ##       ##     ## ##       ###   ##    ##    ##    ##\n  //    ##       ##     ## ##       ####  ##    ##    ##\n  //    ######   ##     ## ######   ## ## ##    ##     ######\n  //    ##        ##   ##  ##       ##  ####    ##          ##\n  //    ##         ## ##   ##       ##   ###    ##    ##    ##\n  //    ########    ###    ######## ##    ##    ##     ######\n\n  // Internal:\n  //\n  // config - An {Object} mapping the config name to observe with the listener\n  //          {Function} to call when the setting was changed.\n  /**\n   * Helper method to register config observers.\n   *\n   * @param  {Object} configs={} an object mapping the config name to observe\n   *                             with the function to call back when a change\n   *                             occurs\n   * @access private\n   */\n  observeConfig (configs = {}) {\n    for (let config in configs) {\n      this.subscriptions.add(atom.config.observe(config, configs[config]))\n    }\n  }\n\n  /**\n   * Callback triggered when the mouse is pressed on the MinimapElement canvas.\n   *\n   * @param  {MouseEvent} e the mouse event object\n   * @access private\n   */\n  mousePressedOverCanvas (e) {\n    if (this.minimap.isStandAlone()) { return }\n    if (e.which === 1) {\n      this.leftMousePressedOverCanvas(e)\n    } else if (e.which === 2) {\n      this.middleMousePressedOverCanvas(e)\n      let {top, height} = this.visibleArea.getBoundingClientRect()\n      this.startDrag({which: 2, pageY: top + height / 2}) // ugly hack\n    }\n  }\n\n  /**\n   * Callback triggered when the mouse left button is pressed on the\n   * MinimapElement canvas.\n   *\n   * @param  {MouseEvent} e the mouse event object\n   * @param  {number} e.pageY the mouse y position in page\n   * @param  {HTMLElement} e.target the source of the event\n   * @access private\n   */\n  leftMousePressedOverCanvas ({pageY, target}) {\n    let y = pageY - target.getBoundingClientRect().top\n    let row = Math.floor(y / this.minimap.getLineHeight()) + this.minimap.getFirstVisibleScreenRow()\n\n    let textEditor = this.minimap.getTextEditor()\n\n    let scrollTop = row * textEditor.getLineHeightInPixels() - this.minimap.getTextEditorHeight() / 2\n\n    if (atom.config.get('minimap.scrollAnimation')) {\n      let from = this.minimap.getTextEditorScrollTop()\n      let to = scrollTop\n      let step = (now) => this.minimap.setTextEditorScrollTop(now)\n      let duration = atom.config.get('minimap.scrollAnimationDuration')\n      this.animate({from: from, to: to, duration: duration, step: step})\n    } else {\n      this.minimap.setTextEditorScrollTop(scrollTop)\n    }\n  }\n\n  /**\n   * Callback triggered when the mouse middle button is pressed on the\n   * MinimapElement canvas.\n   *\n   * @param  {MouseEvent} e the mouse event object\n   * @param  {number} e.pageY the mouse y position in page\n   * @access private\n   */\n  middleMousePressedOverCanvas ({pageY}) {\n    let {top: offsetTop} = this.getBoundingClientRect()\n    let y = pageY - offsetTop - this.minimap.getTextEditorScaledHeight() / 2\n\n    let ratio = y / (this.minimap.getVisibleHeight() - this.minimap.getTextEditorScaledHeight())\n\n    this.minimap.setTextEditorScrollTop(ratio * this.minimap.getTextEditorMaxScrollTop())\n  }\n\n  /**\n   * A method that relays the `mousewheel` events received by the MinimapElement\n   * to the `TextEditorElement`.\n   *\n   * @param  {MouseEvent} e the mouse event object\n   * @access private\n   */\n  relayMousewheelEvent (e) {\n    this.getTextEditorElement().component.onMouseWheel(e)\n  }\n\n  //    ########    ####    ########\n  //    ##     ##  ##  ##   ##     ##\n  //    ##     ##   ####    ##     ##\n  //    ##     ##  ####     ##     ##\n  //    ##     ## ##  ## ## ##     ##\n  //    ##     ## ##   ##   ##     ##\n  //    ########   ####  ## ########\n\n  /**\n   * A method triggered when the mouse is pressed over the visible area that\n   * starts the dragging gesture.\n   *\n   * @param  {MouseEvent} e the mouse event object\n   * @access private\n   */\n  startDrag (e) {\n    let {which, pageY} = e\n    if (!this.minimap) { return }\n    if (which !== 1 && which !== 2 && !(e.touches != null)) { return }\n\n    let {top} = this.visibleArea.getBoundingClientRect()\n    let {top: offsetTop} = this.getBoundingClientRect()\n\n    let dragOffset = pageY - top\n\n    let initial = {dragOffset, offsetTop}\n\n    let mousemoveHandler = (e) => this.drag(e, initial)\n    let mouseupHandler = (e) => this.endDrag(e, initial)\n\n    document.body.addEventListener('mousemove', mousemoveHandler)\n    document.body.addEventListener('mouseup', mouseupHandler)\n    document.body.addEventListener('mouseleave', mouseupHandler)\n\n    document.body.addEventListener('touchmove', mousemoveHandler)\n    document.body.addEventListener('touchend', mouseupHandler)\n\n    this.dragSubscription = new Disposable(function () {\n      document.body.removeEventListener('mousemove', mousemoveHandler)\n      document.body.removeEventListener('mouseup', mouseupHandler)\n      document.body.removeEventListener('mouseleave', mouseupHandler)\n\n      document.body.removeEventListener('touchmove', mousemoveHandler)\n      document.body.removeEventListener('touchend', mouseupHandler)\n    })\n  }\n\n  /**\n   * The method called during the drag gesture.\n   *\n   * @param  {MouseEvent} e the mouse event object\n   * @param  {Object} initial\n   * @param  {number} initial.dragOffset the mouse offset within the visible\n   *                                     area\n   * @param  {number} initial.offsetTop the MinimapElement offset at the moment\n   *                                    of the drag start\n   * @access private\n   */\n  drag (e, initial) {\n    if (!this.minimap) { return }\n    if (e.which !== 1 && e.which !== 2 && !(e.touches != null)) { return }\n    let y = e.pageY - initial.offsetTop - initial.dragOffset\n\n    let ratio = y / (this.minimap.getVisibleHeight() - this.minimap.getTextEditorScaledHeight())\n\n    this.minimap.setTextEditorScrollTop(ratio * this.minimap.getTextEditorMaxScrollTop())\n  }\n\n  /**\n   * The method that ends the drag gesture.\n   *\n   * @param  {MouseEvent} e the mouse event object\n   * @param  {Object} initial\n   * @param  {number} initial.dragOffset the mouse offset within the visible\n   *                                     area\n   * @param  {number} initial.offsetTop the MinimapElement offset at the moment\n   *                                    of the drag start\n   * @access private\n   */\n  endDrag (e, initial) {\n    if (!this.minimap) { return }\n    this.dragSubscription.dispose()\n  }\n\n  //     ######   ######   ######\n  //    ##    ## ##    ## ##    ##\n  //    ##       ##       ##\n  //    ##        ######   ######\n  //    ##             ##       ##\n  //    ##    ## ##    ## ##    ##\n  //     ######   ######   ######\n\n  /**\n   * Applies the passed-in styles properties to the specified element\n   *\n   * @param  {HTMLElement} element the element onto which apply the styles\n   * @param  {Object} styles the styles to apply\n   * @access private\n   */\n  applyStyles (element, styles) {\n    if (!element) { return }\n\n    let cssText = ''\n    for (let property in styles) {\n      cssText += `${property}: ${styles[property]}; `\n    }\n\n    element.style.cssText = cssText\n  }\n\n  /**\n   * Returns a string with a CSS translation tranform value.\n   *\n   * @param  {number} [x = 0] the x offset of the translation\n   * @param  {number} [y = 0] the y offset of the translation\n   * @return {string} the CSS translation string\n   * @access private\n   */\n  makeTranslate (x = 0, y = 0) {\n    if (this.useHardwareAcceleration) {\n      return `translate3d(${x}px, ${y}px, 0)`\n    } else {\n      return `translate(${x}px, ${y}px)`\n    }\n  }\n\n  /**\n   * Returns a string with a CSS scaling tranform value.\n   *\n   * @param  {number} [x = 0] the x scaling factor\n   * @param  {number} [y = 0] the y scaling factor\n   * @return {string} the CSS scaling string\n   * @access private\n   */\n  makeScale (x = 0, y = x) {\n    if (this.useHardwareAcceleration) {\n      return `scale3d(${x}, ${y}, 1)`\n    } else {\n      return `scale(${x}, ${y})`\n    }\n  }\n\n  /**\n   * A method that return the current time as a Date.\n   *\n   * That method exist so that we can mock it in tests.\n   *\n   * @return {Date} the current time as Date\n   * @access private\n   */\n  getTime () { return new Date() }\n\n  /**\n   * A method that mimic the jQuery `animate` method and used to animate the\n   * scroll when clicking on the MinimapElement canvas.\n   *\n   * @param  {Object} param the animation data object\n   * @param  {[type]} param.from the start value\n   * @param  {[type]} param.to the end value\n   * @param  {[type]} param.duration the animation duration\n   * @param  {[type]} param.step the easing function for the animation\n   * @access private\n   */\n  animate ({from, to, duration, step}) {\n    let progress\n    let start = this.getTime()\n\n    let swing = function (progress) {\n      return 0.5 - Math.cos(progress * Math.PI) / 2\n    }\n\n    let update = () => {\n      let passed = this.getTime() - start\n      if (duration === 0) {\n        progress = 1\n      } else {\n        progress = passed / duration\n      }\n      if (progress > 1) { progress = 1 }\n      let delta = swing(progress)\n      step(from + (to - from) * delta)\n\n      if (progress < 1) { requestAnimationFrame(update) }\n    }\n\n    update()\n  }\n}\n"
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SPEC_MODE",
    "memberof": "lib/minimap-element.js",
    "longname": "lib/minimap-element.js~SPEC_MODE",
    "access": null,
    "export": false,
    "importPath": "minimap/lib/minimap-element.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MinimapElement",
    "memberof": "lib/minimap-element.js",
    "longname": "lib/minimap-element.js~MinimapElement",
    "access": null,
    "export": true,
    "importPath": "minimap/lib/minimap-element.js",
    "importStyle": "MinimapElement",
    "description": "Public: The MinimapElement is the view meant to render a {@link Minimap}\ninstance in the DOM.\n\nYou can retrieve the MinimapElement associated to a Minimap\nusing the `atom.views.getView` method.\n\nNote that most interactions with the Minimap package is done through the\nMinimap model so you should never have to access MinimapElement\ninstances.",
    "examples": [
      "let minimapElement = atom.views.getView(minimap)"
    ],
    "lineNumber": 29,
    "interface": false
  },
  {
    "__docId__": 111,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "registerViewProvider",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement.registerViewProvider",
    "access": null,
    "description": "The method that registers the MinimapElement factory in the\n`atom.views` registry with the Minimap model.",
    "lineNumber": 35,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createdCallback",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#createdCallback",
    "access": "private",
    "description": "DOM callback invoked when a new MinimapElement is created.",
    "lineNumber": 56,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 113,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "minimap",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#minimap",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "editorElement",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#editorElement",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#width",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#height",
    "access": "private",
    "description": null,
    "lineNumber": 74,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subscriptions",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#subscriptions",
    "access": "private",
    "description": null,
    "lineNumber": 81,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "visibleAreaSubscription",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#visibleAreaSubscription",
    "access": "private",
    "description": null,
    "lineNumber": 85,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "quickSettingsSubscription",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#quickSettingsSubscription",
    "access": "private",
    "description": null,
    "lineNumber": 89,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dragSubscription",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#dragSubscription",
    "access": "private",
    "description": null,
    "lineNumber": 93,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "openQuickSettingSubscription",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#openQuickSettingSubscription",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "displayMinimapOnLeft",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#displayMinimapOnLeft",
    "access": "private",
    "description": null,
    "lineNumber": 104,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "minimapScrollIndicator",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#minimapScrollIndicator",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "displayMinimapOnLeft",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#displayMinimapOnLeft",
    "access": "private",
    "description": null,
    "lineNumber": 112,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "displayPluginsControls",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#displayPluginsControls",
    "access": "private",
    "description": null,
    "lineNumber": 116,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "textOpacity",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#textOpacity",
    "access": "private",
    "description": null,
    "lineNumber": 120,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "displayCodeHighlights",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#displayCodeHighlights",
    "access": "private",
    "description": null,
    "lineNumber": 124,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "adjustToSoftWrap",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#adjustToSoftWrap",
    "access": "private",
    "description": null,
    "lineNumber": 128,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "useHardwareAcceleration",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#useHardwareAcceleration",
    "access": "private",
    "description": null,
    "lineNumber": 132,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "absoluteMode",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#absoluteMode",
    "access": "private",
    "description": null,
    "lineNumber": 136,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "shadowRoot",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#shadowRoot",
    "access": "private",
    "description": null,
    "lineNumber": 143,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "visibleArea",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#visibleArea",
    "access": "private",
    "description": null,
    "lineNumber": 147,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "controls",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#controls",
    "access": "private",
    "description": null,
    "lineNumber": 151,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrollIndicator",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#scrollIndicator",
    "access": "private",
    "description": null,
    "lineNumber": 155,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "openQuickSettings",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#openQuickSettings",
    "access": "private",
    "description": null,
    "lineNumber": 159,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "quickSettingsElement",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#quickSettingsElement",
    "access": "private",
    "description": null,
    "lineNumber": 163,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "attached",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#attached",
    "access": "private",
    "description": null,
    "lineNumber": 170,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "attachedToTextEditor",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#attachedToTextEditor",
    "access": "private",
    "description": null,
    "lineNumber": 174,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "standAlone",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#standAlone",
    "access": "private",
    "description": null,
    "lineNumber": 178,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "wasVisible",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#wasVisible",
    "access": "private",
    "description": null,
    "lineNumber": 182,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "offscreenFirstRow",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#offscreenFirstRow",
    "access": "private",
    "description": null,
    "lineNumber": 189,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "offscreenLastRow",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#offscreenLastRow",
    "access": "private",
    "description": null,
    "lineNumber": 193,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "frameRequested",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#frameRequested",
    "access": "private",
    "description": null,
    "lineNumber": 197,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "flexBasis",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#flexBasis",
    "access": "private",
    "description": null,
    "lineNumber": 201,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "displayMinimapOnLeft",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#displayMinimapOnLeft",
    "access": null,
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "minimapScrollIndicator",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#minimapScrollIndicator",
    "access": null,
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "displayPluginsControls",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#displayPluginsControls",
    "access": null,
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "textOpacity",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#textOpacity",
    "access": null,
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "displayCodeHighlights",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#displayCodeHighlights",
    "access": null,
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "adjustToSoftWrap",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#adjustToSoftWrap",
    "access": null,
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "useHardwareAcceleration",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#useHardwareAcceleration",
    "access": null,
    "description": null,
    "lineNumber": 253,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "absoluteMode",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#absoluteMode",
    "access": null,
    "description": null,
    "lineNumber": 259,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "attachedCallback",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#attachedCallback",
    "access": "private",
    "description": "DOM callback invoked when a new MinimapElement is attached to the DOM.",
    "lineNumber": 283,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "attached",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#attached",
    "access": null,
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "attachedToTextEditor",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#attachedToTextEditor",
    "access": null,
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "detachedCallback",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#detachedCallback",
    "access": "private",
    "description": "DOM callback invoked when a new MinimapElement is detached from the DOM.",
    "lineNumber": 307,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 157,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "attached",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#attached",
    "access": null,
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isVisible",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#isVisible",
    "access": null,
    "description": "Returns whether the MinimapElement is currently visible on screen or not.\n\nThe visibility of the minimap is defined by testing the size of the offset\nwidth and height of the element.",
    "lineNumber": 327,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether the MinimapElement is currently visible or not"
    },
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "attach",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#attach",
    "access": null,
    "description": "Attaches the MinimapElement to the DOM.\n\nThe position at which the element is attached is defined by the\n`displayMinimapOnLeft` setting.",
    "lineNumber": 338,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": true,
        "name": "parent",
        "description": "the DOM node where attaching the minimap\n                               element"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "detach",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#detach",
    "access": null,
    "description": "Detaches the MinimapElement from the DOM.",
    "lineNumber": 346,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 161,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateMinimapFlexPosition",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#updateMinimapFlexPosition",
    "access": "private",
    "description": "Toggles the minimap left/right position based on the value of the\n`displayMinimapOnLeft` setting.",
    "lineNumber": 357,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 162,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#destroy",
    "access": null,
    "description": "Destroys this MinimapElement",
    "lineNumber": 364,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "minimap",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#minimap",
    "access": null,
    "description": null,
    "lineNumber": 367,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initializeContent",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#initializeContent",
    "access": "private",
    "description": "Creates the content of the MinimapElement and attaches the mouse control\nevent listeners.",
    "lineNumber": 384,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "shadowRoot",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#shadowRoot",
    "access": null,
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createVisibleArea",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#createVisibleArea",
    "access": "private",
    "description": "Initializes the visible area div.",
    "lineNumber": 409,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "visibleArea",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#visibleArea",
    "access": null,
    "description": null,
    "lineNumber": 412,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "visibleAreaSubscription",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#visibleAreaSubscription",
    "access": null,
    "description": null,
    "lineNumber": 415,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeVisibleArea",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#removeVisibleArea",
    "access": "private",
    "description": "Removes the visible area div.",
    "lineNumber": 428,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 170,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createControls",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#createControls",
    "access": "private",
    "description": "Creates the controls container div.",
    "lineNumber": 442,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 171,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "controls",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#controls",
    "access": null,
    "description": null,
    "lineNumber": 445,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeControls",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#removeControls",
    "access": "private",
    "description": "Removes the controls container div.",
    "lineNumber": 455,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initializeScrollIndicator",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#initializeScrollIndicator",
    "access": "private",
    "description": "Initializes the scroll indicator div when the `minimapScrollIndicator`\nsettings is enabled.",
    "lineNumber": 468,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrollIndicator",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#scrollIndicator",
    "access": null,
    "description": null,
    "lineNumber": 471,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disposeScrollIndicator",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#disposeScrollIndicator",
    "access": "private",
    "description": "Disposes the scroll indicator div when the `minimapScrollIndicator`\nsettings is disabled.",
    "lineNumber": 482,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 176,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initializeOpenQuickSettings",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#initializeOpenQuickSettings",
    "access": "private",
    "description": "Initializes the quick settings openener div when the\n`displayPluginsControls` setting is enabled.",
    "lineNumber": 495,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "openQuickSettings",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#openQuickSettings",
    "access": null,
    "description": null,
    "lineNumber": 498,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "openQuickSettingSubscription",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#openQuickSettingSubscription",
    "access": null,
    "description": null,
    "lineNumber": 502,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "quickSettingsElement",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#quickSettingsElement",
    "access": null,
    "description": null,
    "lineNumber": 511,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "quickSettingsSubscription",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#quickSettingsSubscription",
    "access": null,
    "description": null,
    "lineNumber": 513,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "quickSettingsElement",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#quickSettingsElement",
    "access": null,
    "description": null,
    "lineNumber": 514,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disposeOpenQuickSettings",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#disposeOpenQuickSettings",
    "access": "private",
    "description": "Disposes the quick settings openener div when the `displayPluginsControls`\nsetting is disabled.",
    "lineNumber": 537,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 183,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditor",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#getTextEditor",
    "access": null,
    "description": "Returns the target `TextEditor` of the Minimap.",
    "lineNumber": 550,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "TextEditor"
      ],
      "spread": false,
      "description": "the minimap's text editor"
    },
    "generator": false
  },
  {
    "__docId__": 184,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditorElement",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#getTextEditorElement",
    "access": null,
    "description": "Returns the `TextEditorElement` for the Minimap's `TextEditor`.",
    "lineNumber": 557,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "TextEditorElement"
      ],
      "spread": false,
      "description": "the minimap's text editor element"
    },
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "editorElement",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#editorElement",
    "access": null,
    "description": null,
    "lineNumber": 560,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditorElementRoot",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#getTextEditorElementRoot",
    "access": null,
    "description": "Returns the root of the `TextEditorElement` content.\n\nThis method is mostly used to ensure compatibility with the `shadowDom`\nsetting.",
    "lineNumber": 572,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "the root of the `TextEditorElement` content"
    },
    "generator": false
  },
  {
    "__docId__": 187,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDummyDOMRoot",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#getDummyDOMRoot",
    "access": "private",
    "description": "Returns the root where to inject the dummy node used to read DOM styles.",
    "lineNumber": 590,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "shadowRoot",
        "description": "whether to use the text editor shadow DOM\n                             or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": "the root node where appending the dummy node"
    },
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getModel",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#getModel",
    "access": null,
    "description": "Returns the Minimap for which this MinimapElement was created.",
    "lineNumber": 611,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Minimap"
      ],
      "spread": false,
      "description": "this element's Minimap"
    },
    "generator": false
  },
  {
    "__docId__": 189,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setModel",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#setModel",
    "access": null,
    "description": "Defines the Minimap model for this MinimapElement instance.",
    "lineNumber": 619,
    "params": [
      {
        "nullable": null,
        "types": [
          "Minimap"
        ],
        "spread": false,
        "optional": false,
        "name": "minimap",
        "description": "the Minimap model for this instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Minimap"
      ],
      "spread": false,
      "description": "this element's Minimap"
    },
    "generator": false
  },
  {
    "__docId__": 190,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "minimap",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#minimap",
    "access": null,
    "description": null,
    "lineNumber": 620,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setStandAlone",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#setStandAlone",
    "access": null,
    "description": "Sets the stand-alone mode for this MinimapElement.",
    "lineNumber": 658,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "standAlone",
        "description": "the new mode for this MinimapElement"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 192,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "standAlone",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#standAlone",
    "access": null,
    "description": null,
    "lineNumber": 659,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "requestUpdate",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#requestUpdate",
    "access": null,
    "description": "Requests an update to be performed on the next frame.",
    "lineNumber": 687,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "frameRequested",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#frameRequested",
    "access": null,
    "description": null,
    "lineNumber": 690,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "frameRequested",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#frameRequested",
    "access": null,
    "description": null,
    "lineNumber": 693,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "requestForcedUpdate",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#requestForcedUpdate",
    "access": null,
    "description": "Requests an update to be performed on the next frame that will completely\nredraw the minimap.",
    "lineNumber": 701,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 197,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "offscreenFirstRow",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#offscreenFirstRow",
    "access": null,
    "description": null,
    "lineNumber": 702,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "offscreenLastRow",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#offscreenLastRow",
    "access": null,
    "description": null,
    "lineNumber": 703,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#update",
    "access": "private",
    "description": "Performs the actual MinimapElement update.",
    "lineNumber": 712,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 200,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDisplayCodeHighlights",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#setDisplayCodeHighlights",
    "access": null,
    "description": "Defines whether to render the code highlights or not.",
    "lineNumber": 791,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "displayCodeHighlights",
        "description": "whether to render the code\n                                       highlights or not"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 201,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "displayCodeHighlights",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#displayCodeHighlights",
    "access": null,
    "description": null,
    "lineNumber": 792,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pollDOM",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#pollDOM",
    "access": "private",
    "description": "Polling callback used to detect visibility and size changes.",
    "lineNumber": 801,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 203,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkForVisibilityChange",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#checkForVisibilityChange",
    "access": "private",
    "description": "A method that checks for visibility changes in the MinimapElement.\nThe method returns `true` when the visibility changed from visible to\nhidden or from hidden to visible.",
    "lineNumber": 818,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether the visibility changed or not since the last call"
    },
    "generator": false
  },
  {
    "__docId__": 204,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "wasVisible",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#wasVisible",
    "access": null,
    "description": null,
    "lineNumber": 823,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "wasVisible",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#wasVisible",
    "access": null,
    "description": null,
    "lineNumber": 828,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "wasVisible",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#wasVisible",
    "access": null,
    "description": null,
    "lineNumber": 831,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "measureHeightAndWidth",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#measureHeightAndWidth",
    "access": "private",
    "description": "A method used to measure the size of the MinimapElement and update internal\ncomponents based on the new size.",
    "lineNumber": 847,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "visibilityChanged",
        "description": "did the visibility changed since last\n                                    measurement"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "forceUpdate",
        "description": "forces the update even when no changes\n                                    were detected"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 208,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#height",
    "access": null,
    "description": null,
    "lineNumber": 852,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#width",
    "access": null,
    "description": null,
    "lineNumber": 853,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "flexBasis",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#flexBasis",
    "access": null,
    "description": null,
    "lineNumber": 870,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "observeConfig",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#observeConfig",
    "access": "private",
    "description": "Helper method to register config observers.",
    "lineNumber": 906,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object} configs={"
        ],
        "spread": false,
        "optional": false,
        "name": "an",
        "description": "object mapping the config name to observe\n                            with the function to call back when a change\n                            occurs"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 212,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mousePressedOverCanvas",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#mousePressedOverCanvas",
    "access": "private",
    "description": "Callback triggered when the mouse is pressed on the MinimapElement canvas.",
    "lineNumber": 918,
    "params": [
      {
        "nullable": null,
        "types": [
          "MouseEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "the mouse event object"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 213,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "leftMousePressedOverCanvas",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#leftMousePressedOverCanvas",
    "access": "private",
    "description": "Callback triggered when the mouse left button is pressed on the\nMinimapElement canvas.",
    "lineNumber": 938,
    "params": [
      {
        "nullable": null,
        "types": [
          "MouseEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "the mouse event object"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "e.pageY",
        "description": "the mouse y position in page"
      },
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "e.target",
        "description": "the source of the event"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "middleMousePressedOverCanvas",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#middleMousePressedOverCanvas",
    "access": "private",
    "description": "Callback triggered when the mouse middle button is pressed on the\nMinimapElement canvas.",
    "lineNumber": 965,
    "params": [
      {
        "nullable": null,
        "types": [
          "MouseEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "the mouse event object"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "e.pageY",
        "description": "the mouse y position in page"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 215,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "relayMousewheelEvent",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#relayMousewheelEvent",
    "access": "private",
    "description": "A method that relays the `mousewheel` events received by the MinimapElement\nto the `TextEditorElement`.",
    "lineNumber": 981,
    "params": [
      {
        "nullable": null,
        "types": [
          "MouseEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "the mouse event object"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 216,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "startDrag",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#startDrag",
    "access": "private",
    "description": "A method triggered when the mouse is pressed over the visible area that\nstarts the dragging gesture.",
    "lineNumber": 1000,
    "params": [
      {
        "nullable": null,
        "types": [
          "MouseEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "the mouse event object"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 217,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dragSubscription",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#dragSubscription",
    "access": null,
    "description": null,
    "lineNumber": 1022,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "drag",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#drag",
    "access": "private",
    "description": "The method called during the drag gesture.",
    "lineNumber": 1043,
    "params": [
      {
        "nullable": null,
        "types": [
          "MouseEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "the mouse event object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "initial",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "initial.dragOffset",
        "description": "the mouse offset within the visible\n                                    area"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "initial.offsetTop",
        "description": "the MinimapElement offset at the moment\n                                   of the drag start"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 219,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "endDrag",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#endDrag",
    "access": "private",
    "description": "The method that ends the drag gesture.",
    "lineNumber": 1064,
    "params": [
      {
        "nullable": null,
        "types": [
          "MouseEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "the mouse event object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "initial",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "initial.dragOffset",
        "description": "the mouse offset within the visible\n                                    area"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "initial.offsetTop",
        "description": "the MinimapElement offset at the moment\n                                   of the drag start"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 220,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "applyStyles",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#applyStyles",
    "access": "private",
    "description": "Applies the passed-in styles properties to the specified element",
    "lineNumber": 1084,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "the element onto which apply the styles"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "styles",
        "description": "the styles to apply"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 221,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "makeTranslate",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#makeTranslate",
    "access": "private",
    "description": "Returns a string with a CSS translation tranform value.",
    "lineNumber": 1103,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "x",
        "description": "= 0] the x offset of the translation"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "y",
        "description": "= 0] the y offset of the translation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the CSS translation string"
    },
    "generator": false
  },
  {
    "__docId__": 222,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "makeScale",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#makeScale",
    "access": "private",
    "description": "Returns a string with a CSS scaling tranform value.",
    "lineNumber": 1119,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "x",
        "description": "= 0] the x scaling factor"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "y",
        "description": "= 0] the y scaling factor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the CSS scaling string"
    },
    "generator": false
  },
  {
    "__docId__": 223,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTime",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#getTime",
    "access": "private",
    "description": "A method that return the current time as a Date.\n\nThat method exist so that we can mock it in tests.",
    "lineNumber": 1135,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": "the current time as Date"
    },
    "generator": false
  },
  {
    "__docId__": 224,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "animate",
    "memberof": "lib/minimap-element.js~MinimapElement",
    "longname": "lib/minimap-element.js~MinimapElement#animate",
    "access": "private",
    "description": "A method that mimic the jQuery `animate` method and used to animate the\nscroll when clicking on the MinimapElement canvas.",
    "lineNumber": 1148,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": "the animation data object"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "param.from",
        "description": "the start value"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "param.to",
        "description": "the end value"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "param.duration",
        "description": "the animation duration"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "param.step",
        "description": "the easing function for the animation"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 225,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/minimap-plugin-generator-element.js",
    "memberof": null,
    "longname": "lib/minimap-plugin-generator-element.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\nimport _ from 'underscore-plus'\nimport fs from 'fs-plus'\nimport path from 'path'\nimport {BufferedProcess} from 'atom'\nimport element from './decorators/element'\n\n/**\n * @access private\n */\n@element('minimap-plugin-generator')\nexport default class MinimapPluginGeneratorElement {\n\n  createdCallback () {\n    this.previouslyFocusedElement = null\n    this.mode = null\n\n    this.modal = document.createElement('atom-panel')\n\n    this.modal.classList.add('minimap-plugin-generator')\n    this.modal.classList.add('modal')\n    this.modal.classList.add('overlay')\n    this.modal.classList.add('from-top')\n\n    this.editor = atom.workspace.buildTextEditor({mini: true})\n    this.editorElement = atom.views.getView(this.editor)\n\n    this.error = document.createElement('div')\n    this.error.classList.add('error')\n\n    this.message = document.createElement('div')\n    this.message.classList.add('message')\n\n    this.modal.appendChild(this.editorElement)\n    this.modal.appendChild(this.error)\n    this.modal.appendChild(this.message)\n\n    this.appendChild(this.modal)\n  }\n\n  attachedCallback () {\n    this.previouslyFocusedElement = document.activeElement\n    this.message.textContent = 'Enter plugin path'\n    this.setPathText('my-minimap-plugin')\n    this.editorElement.focus()\n  }\n\n  attach () {\n    atom.views.getView(atom.workspace).appendChild(this)\n  }\n\n  setPathText (placeholderName, rangeToSelect) {\n    if (!rangeToSelect) { rangeToSelect = [0, placeholderName.length] }\n\n    let packagesDirectory = this.getPackagesDirectory()\n\n    this.editor.setText(path.join(packagesDirectory, placeholderName))\n\n    let pathLength = this.editor.getText().length\n    let endOfDirectoryIndex = pathLength - placeholderName.length\n\n    this.editor.setSelectedBufferRange([\n      [0, endOfDirectoryIndex + rangeToSelect[0]],\n      [0, endOfDirectoryIndex + rangeToSelect[1]]\n    ])\n  }\n\n  detach () {\n    if (!this.parentNode) { return }\n\n    if (this.previouslyFocusedElement) {\n      this.previouslyFocusedElement.focus()\n    }\n\n    this.parentNode.removeChild(this)\n  }\n\n  confirm () {\n    if (this.validPackagePath()) {\n      this.removeChild(this.editorElement)\n      this.message.innerHTML = `\n        <span class='loading loading-spinner-tiny inline-block'></span>\n        Generate plugin at <span class=\"text-primary\">${this.getPackagePath()}</span>\n      `\n\n      this.createPackageFiles(() => {\n        let packagePath = this.getPackagePath()\n        atom.open({pathsToOpen: [packagePath], devMode: atom.config.get('minimap.createPluginInDevMode')})\n\n        this.message.innerHTML = '<span class=\"text-success\">Plugin successfully generated, opening it now...</span>'\n\n        setTimeout(() => { this.detach() }, 2000)\n      })\n    }\n  }\n\n  getPackagePath () {\n    let packagePath = this.editor.getText()\n    let packageName = _.dasherize(path.basename(packagePath))\n\n    return path.join(path.dirname(packagePath), packageName)\n  }\n\n  getPackagesDirectory () {\n    return atom.config.get('core.projectHome') ||\n           process.env.ATOM_REPOS_HOME ||\n           path.join(fs.getHomeDirectory(), 'github')\n  }\n\n  validPackagePath () {\n    if (fs.existsSync(this.getPackagePath())) {\n      this.error.textContent = `Path already exists at '${this.getPackagePath()}'`\n      this.error.style.display = 'block'\n      return false\n    } else {\n      return true\n    }\n  }\n\n  initPackage (packagePath, callback) {\n    let templatePath = path.resolve(__dirname, path.join('..', 'templates', `plugin-${this.template}`))\n    this.runCommand(atom.packages.getApmPath(), ['init', '-p', `${packagePath}`, '--template', templatePath], callback)\n  }\n\n  linkPackage (packagePath, callback) {\n    let args = ['link']\n    if (atom.config.get('minimap.createPluginInDevMode')) { args.push('--dev') }\n    args.push(packagePath.toString())\n\n    this.runCommand(atom.packages.getApmPath(), args, callback)\n  }\n\n  installPackage (packagePath, callback) {\n    let args = ['install']\n\n    this.runCommand(atom.packages.getApmPath(), args, callback, {cwd: packagePath})\n  }\n\n  isStoredInDotAtom (packagePath) {\n    let packagesPath = path.join(atom.getConfigDirPath(), 'packages', path.sep)\n    if (packagePath.indexOf(packagesPath) === 0) { return true }\n\n    let devPackagesPath = path.join(atom.getConfigDirPath(), 'dev', 'packages', path.sep)\n\n    return packagePath.indexOf(devPackagesPath) === 0\n  }\n\n  createPackageFiles (callback) {\n    let packagePath = this.getPackagePath()\n\n    if (this.isStoredInDotAtom(packagePath)) {\n      this.initPackage(packagePath, () => {\n        this.installPackage(packagePath, callback)\n      })\n    } else {\n      this.initPackage(packagePath, () => {\n        this.linkPackage(packagePath, () => {\n          this.installPackage(packagePath, callback)\n        })\n      })\n    }\n  }\n\n  runCommand (command, args, exit, options = {}) {\n    return new BufferedProcess({command, args, exit, options})\n  }\n}\n\natom.commands.add('minimap-plugin-generator', {\n  'core:confirm' () { this.confirm() },\n  'core:cancel' () { this.detach() }\n})\n"
  },
  {
    "__docId__": 226,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MinimapPluginGeneratorElement",
    "memberof": "lib/minimap-plugin-generator-element.js",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "access": "private",
    "export": true,
    "importPath": "minimap/lib/minimap-plugin-generator-element.js",
    "importStyle": "MinimapPluginGeneratorElement",
    "description": null,
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 227,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createdCallback",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#createdCallback",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 228,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "previouslyFocusedElement",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#previouslyFocusedElement",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "mode",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#mode",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "modal",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#modal",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "editor",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#editor",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "editorElement",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#editorElement",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "error",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#error",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "message",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#message",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "attachedCallback",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#attachedCallback",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 236,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "previouslyFocusedElement",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#previouslyFocusedElement",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "attach",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#attach",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 238,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setPathText",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#setPathText",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "placeholderName",
        "types": [
          "*"
        ]
      },
      {
        "name": "rangeToSelect",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 239,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "detach",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#detach",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 240,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "confirm",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#confirm",
    "access": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 241,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPackagePath",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#getPackagePath",
    "access": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 242,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPackagesDirectory",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#getPackagesDirectory",
    "access": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 243,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "validPackagePath",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#validPackagePath",
    "access": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 244,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initPackage",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#initPackage",
    "access": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "packagePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 245,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "linkPackage",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#linkPackage",
    "access": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "packagePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 246,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "installPackage",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#installPackage",
    "access": null,
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "packagePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 247,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isStoredInDotAtom",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#isStoredInDotAtom",
    "access": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "packagePath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 248,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createPackageFiles",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#createPackageFiles",
    "access": null,
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 249,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runCommand",
    "memberof": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement",
    "longname": "lib/minimap-plugin-generator-element.js~MinimapPluginGeneratorElement#runCommand",
    "access": null,
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      },
      {
        "name": "exit",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 250,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/minimap-quick-settings-element.js",
    "memberof": null,
    "longname": "lib/minimap-quick-settings-element.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\nimport {CompositeDisposable, Emitter} from 'atom'\nimport {EventsDelegation, SpacePenDSL} from 'atom-utils'\n\nimport Main from './main'\nimport element from './decorators/element'\nimport include from './decorators/include'\n\n/**\n * @access private\n */\n@element('minimap-quick-settings')\n@include(EventsDelegation, SpacePenDSL.Babel)\nexport default class MinimapQuickSettingsElement {\n\n  static content () {\n    this.div({class: 'select-list popover-list minimap-quick-settings'}, () => {\n      this.input({type: 'text', class: 'hidden-input', outlet: 'hiddenInput'})\n      this.ol({class: 'list-group mark-active', outlet: 'list'}, () => {\n        this.li({class: 'separator', outlet: 'separator'})\n        this.li({class: 'code-highlights', outlet: 'codeHighlights'}, 'code-highlights')\n        this.li({class: 'absolute-mode', outlet: 'absoluteMode'}, 'absolute-mode')\n      })\n      this.div({class: 'btn-group'}, () => {\n        this.button({class: 'btn btn-default', outlet: 'onLeftButton'}, 'On Left')\n        this.button({class: 'btn btn-default', outlet: 'onRightButton'}, 'On Right')\n      })\n    })\n  }\n\n  createdCallback () {\n    this.buildContent()\n  }\n\n  setModel (minimap) {\n    this.selectedItem = null\n    this.minimap = minimap\n    this.emitter = new Emitter()\n    this.subscriptions = new CompositeDisposable()\n    this.plugins = {}\n    this.itemsActions = new WeakMap()\n\n    this.subscriptions.add(Main.onDidAddPlugin(({name, plugin}) => {\n      return this.addItemFor(name, plugin)\n    }))\n    this.subscriptions.add(Main.onDidRemovePlugin(({name, plugin}) => {\n      return this.removeItemFor(name, plugin)\n    }))\n    this.subscriptions.add(Main.onDidActivatePlugin(({name, plugin}) => {\n      return this.activateItem(name, plugin)\n    }))\n    this.subscriptions.add(Main.onDidDeactivatePlugin(({name, plugin}) => {\n      return this.deactivateItem(name, plugin)\n    }))\n\n    this.subscriptions.add(atom.commands.add('minimap-quick-settings', {\n      'core:move-up': () => { this.selectPreviousItem() },\n      'core:move-down': () => { this.selectNextItem() },\n      'core:move-left': () => {\n        atom.config.set('minimap.displayMinimapOnLeft', true)\n      },\n      'core:move-right': () => {\n        atom.config.set('minimap.displayMinimapOnLeft', false)\n      },\n      'core:cancel': () => { this.destroy() },\n      'core:confirm': () => { this.toggleSelectedItem() }\n    }))\n\n    this.codeHighlights.classList.toggle('active', this.minimap.displayCodeHighlights)\n    this.subscriptions.add(this.subscribeTo(this.codeHighlights, {\n      'mousedown': (e) => {\n        e.preventDefault()\n        atom.config.set('minimap.displayCodeHighlights', !this.minimap.displayCodeHighlights)\n      }\n    }))\n\n    this.itemsActions.set(this.codeHighlights, () => {\n      atom.config.set('minimap.displayCodeHighlights', !this.minimap.displayCodeHighlights)\n    })\n\n    this.subscriptions.add(this.subscribeTo(this.absoluteMode, {\n      'mousedown': (e) => {\n        e.preventDefault()\n        atom.config.set('minimap.absoluteMode', !atom.config.get('minimap.absoluteMode'))\n      }\n    }))\n\n    this.itemsActions.set(this.absoluteMode, () => {\n      atom.config.set('minimap.absoluteMode', !atom.config.get('minimap.absoluteMode'))\n    })\n\n    this.subscriptions.add(this.subscribeTo(this.hiddenInput, {\n      'focusout': (e) => { this.destroy() }\n    }))\n\n    this.subscriptions.add(this.subscribeTo(this.onLeftButton, {\n      'mousedown': (e) => {\n        e.preventDefault()\n        atom.config.set('minimap.displayMinimapOnLeft', true)\n      }\n    }))\n\n    this.subscriptions.add(this.subscribeTo(this.onRightButton, {\n      'mousedown': (e) => {\n        e.preventDefault()\n        atom.config.set('minimap.displayMinimapOnLeft', false)\n      }\n    }))\n\n    this.subscriptions.add(atom.config.observe('minimap.displayCodeHighlights', (bool) => {\n      this.codeHighlights.classList.toggle('active', bool)\n    }))\n\n    this.subscriptions.add(atom.config.observe('minimap.absoluteMode', (bool) => {\n      this.absoluteMode.classList.toggle('active', bool)\n    }))\n\n    this.subscriptions.add(atom.config.observe('minimap.displayMinimapOnLeft', (bool) => {\n      this.onLeftButton.classList.toggle('selected', bool)\n      this.onRightButton.classList.toggle('selected', !bool)\n    }))\n\n    this.initList()\n  }\n\n  onDidDestroy (callback) {\n    return this.emitter.on('did-destroy', callback)\n  }\n\n  attach () {\n    var workspaceElement = atom.views.getView(atom.workspace)\n    workspaceElement.appendChild(this)\n    this.hiddenInput.focus()\n  }\n\n  destroy () {\n    this.emitter.emit('did-destroy')\n    this.subscriptions.dispose()\n    this.parentNode.removeChild(this)\n  }\n\n  initList () {\n    this.itemsDisposables = new WeakMap()\n    for (var name in Main.plugins) {\n      var plugin = Main.plugins[name]\n      this.addItemFor(name, plugin)\n    }\n  }\n\n  toggleSelectedItem () {\n    let fn = this.itemsActions.get(this.selectedItem)\n    typeof fn === 'function' ? fn() : undefined\n  }\n\n  selectNextItem () {\n    this.selectedItem.classList.remove('selected')\n    if ((this.selectedItem.nextSibling != null)) {\n      this.selectedItem = this.selectedItem.nextSibling\n      if (this.selectedItem.matches('.separator')) { this.selectedItem = this.selectedItem.nextSibling }\n    } else {\n      this.selectedItem = this.list.firstChild\n    }\n    this.selectedItem.classList.add('selected')\n  }\n\n  selectPreviousItem () {\n    this.selectedItem.classList.remove('selected')\n    if ((this.selectedItem.previousSibling != null)) {\n      this.selectedItem = this.selectedItem.previousSibling\n      if (this.selectedItem.matches('.separator')) { this.selectedItem = this.selectedItem.previousSibling }\n    } else {\n      this.selectedItem = this.list.lastChild\n    }\n    this.selectedItem.classList.add('selected')\n  }\n\n  addItemFor (name, plugin) {\n    var item = document.createElement('li')\n    if (plugin.isActive()) { item.classList.add('active') }\n    item.textContent = name\n\n    var action = () => { Main.togglePluginActivation(name) }\n\n    this.itemsActions.set(item, action)\n    this.itemsDisposables.set(item, this.addDisposableEventListener(item, 'mousedown', (e) => {\n      e.preventDefault()\n      action()\n    }))\n\n    this.plugins[name] = item\n    this.list.insertBefore(item, this.separator)\n\n    if (!(this.selectedItem != null)) {\n      this.selectedItem = item\n      this.selectedItem.classList.add('selected')\n    }\n  }\n\n  removeItemFor (name, plugin) {\n    try { this.list.removeChild(this.plugins[name]) } catch (error) {}\n    delete this.plugins[name]\n  }\n\n  activateItem (name, plugin) {\n    this.plugins[name].classList.add('active')\n  }\n\n  deactivateItem (name, plugin) {\n    this.plugins[name].classList.remove('active')\n  }\n}\n"
  },
  {
    "__docId__": 251,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MinimapQuickSettingsElement",
    "memberof": "lib/minimap-quick-settings-element.js",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "access": "private",
    "export": true,
    "importPath": "minimap/lib/minimap-quick-settings-element.js",
    "importStyle": "MinimapQuickSettingsElement",
    "description": null,
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 252,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "content",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement.content",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 253,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createdCallback",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#createdCallback",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 254,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setModel",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#setModel",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "minimap",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 255,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#selectedItem",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "minimap",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#minimap",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "emitter",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#emitter",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subscriptions",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#subscriptions",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "plugins",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#plugins",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "itemsActions",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#itemsActions",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidDestroy",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#onDidDestroy",
    "access": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 262,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "attach",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#attach",
    "access": null,
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 263,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#destroy",
    "access": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 264,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initList",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#initList",
    "access": null,
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 265,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "itemsDisposables",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#itemsDisposables",
    "access": null,
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toggleSelectedItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#toggleSelectedItem",
    "access": null,
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 267,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectNextItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#selectNextItem",
    "access": null,
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 268,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#selectedItem",
    "access": null,
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#selectedItem",
    "access": null,
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#selectedItem",
    "access": null,
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectPreviousItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#selectPreviousItem",
    "access": null,
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 272,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#selectedItem",
    "access": null,
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#selectedItem",
    "access": null,
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#selectedItem",
    "access": null,
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addItemFor",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#addItemFor",
    "access": null,
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "plugin",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 276,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "selectedItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#selectedItem",
    "access": null,
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeItemFor",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#removeItemFor",
    "access": null,
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "plugin",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 278,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "activateItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#activateItem",
    "access": null,
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "plugin",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 279,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deactivateItem",
    "memberof": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement",
    "longname": "lib/minimap-quick-settings-element.js~MinimapQuickSettingsElement#deactivateItem",
    "access": null,
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "plugin",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 280,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/minimap.js",
    "memberof": null,
    "longname": "lib/minimap.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\nimport {Emitter, CompositeDisposable} from 'atom'\nimport include from './decorators/include'\nimport DecorationManagement from './mixins/decoration-management'\nimport LegacyAdater from './adapters/legacy-adapter'\nimport StableAdapter from './adapters/stable-adapter'\n\nlet nextModelId = 1\n\n/**\n * The Minimap class is the underlying model of a <MinimapElement>.\n * Most manipulations of the minimap is done through the model.\n *\n * Any Minimap instance is tied to a `TextEditor`.\n * Their lifecycle follow the one of their target `TextEditor`, so they are\n * destroyed whenever their `TextEditor` is destroyed.\n */\n@include(DecorationManagement)\nexport default class Minimap {\n  /**\n   * Creates a new Minimap instance for the given `TextEditor`.\n   *\n   * @param  {Object} options an object with the new Minimap properties\n   * @param  {TextEditor} options.textEditor the target text editor for\n   *                                         the minimap\n   * @param  {boolean} [options.standAlone] whether this minimap is in\n   *                                        stand-alone mode or not\n   * @param  {number} [options.width] the minimap width in pixels\n   * @param  {number} [options.height] the minimap height in pixels\n   * @throws {Error} Cannot create a minimap without an editor\n   */\n  constructor (options = {}) {\n    if (!options.textEditor) {\n      throw new Error('Cannot create a minimap without an editor')\n    }\n\n    /**\n     * The Minimap's text editor.\n     *\n     * @type {TextEditor}\n     * @access private\n     */\n    this.textEditor = options.textEditor\n    /**\n     * The stand-alone state of the current Minimap.\n     *\n     * @type {boolean}\n     * @access private\n     */\n    this.standAlone = options.standAlone\n    /**\n     * The width of the current Minimap.\n     *\n     * @type {number}\n     * @access private\n     */\n    this.width = options.width\n    /**\n     * The height of the current Minimap.\n     *\n     * @type {number}\n     * @access private\n     */\n    this.height = options.height\n    /**\n     * The id of the current Minimap.\n     *\n     * @type {Number}\n     * @access private\n     */\n    this.id = nextModelId++\n    /**\n     * The events emitter of the current Minimap.\n     *\n     * @type {Emitter}\n     * @access private\n     */\n    this.emitter = new Emitter()\n    /**\n     * The Minimap's subscriptions.\n     *\n     * @type {CompositeDisposable}\n     * @access private\n     */\n    this.subscriptions = new CompositeDisposable()\n    /**\n     * The adapter object leverage the access to several properties from\n     * the `TextEditor`/`TextEditorElement` to support the different APIs\n     * between different version of Atom.\n     *\n     * @type {Object}\n     * @access private\n     */\n    this.adapter = null\n    /**\n     * The char height of the current Minimap, will be `undefined` unless\n     * `setCharWidth` is called.\n     *\n     * @type {number}\n     * @access private\n     */\n    this.charHeight = null\n    /**\n     * The char height from the package's configuration. Will be overriden\n     * by the instance value.\n     *\n     * @type {number}\n     * @access private\n     */\n    this.configCharHeight = null\n    /**\n     * The char width of the current Minimap, will be `undefined` unless\n     * `setCharWidth` is called.\n     *\n     * @type {number}\n     * @access private\n     */\n    this.charWidth = null\n    /**\n     * The char width from the package's configuration. Will be overriden\n     * by the instance value.\n     *\n     * @type {number}\n     * @access private\n     */\n    this.configCharWidth = null\n    /**\n     * The interline of the current Minimap, will be `undefined` unless\n     * `setCharWidth` is called.\n     *\n     * @type {number}\n     * @access private\n     */\n    this.interline = null\n    /**\n     * The interline from the package's configuration. Will be overriden\n     * by the instance value.\n     *\n     * @type {number}\n     * @access private\n     */\n    this.configInterline = null\n    /**\n     * A boolean value to store whether this Minimap have been destroyed or not.\n     *\n     * @type {boolean}\n     * @access private\n     */\n    this.destroyed = false\n    /**\n     * A boolean value to store whether the `scrollPastEnd` setting is enabled\n     * or not.\n     *\n     * @type {boolean}\n     * @access private\n     */\n    this.scrollPastEnd = false\n\n    this.initializeDecorations()\n\n    if (atom.views.getView(this.textEditor).getScrollTop != null) {\n      this.adapter = new StableAdapter(this.textEditor)\n    } else {\n      this.adapter = new LegacyAdater(this.textEditor)\n    }\n\n    if (this.standAlone) {\n      /**\n       * When in stand-alone mode, a Minimap doesn't scroll and will use this\n       * value instead.\n       *\n       * @type {number}\n       * @access private\n       */\n      this.scrollTop = 0\n    }\n\n    let subs = this.subscriptions\n    subs.add(atom.config.observe('editor.scrollPastEnd', (scrollPastEnd) => {\n      this.scrollPastEnd = scrollPastEnd\n      this.adapter.scrollPastEnd = this.scrollPastEnd\n      this.emitter.emit('did-change-config')\n    }))\n    subs.add(atom.config.observe('minimap.charHeight', (configCharHeight) => {\n      this.configCharHeight = configCharHeight\n      this.emitter.emit('did-change-config')\n    }))\n    subs.add(atom.config.observe('minimap.charWidth', (configCharWidth) => {\n      this.configCharWidth = configCharWidth\n      this.emitter.emit('did-change-config')\n    }))\n    subs.add(atom.config.observe('minimap.interline', (configInterline) => {\n      this.configInterline = configInterline\n      this.emitter.emit('did-change-config')\n    }))\n\n    subs.add(this.adapter.onDidChangeScrollTop(() => {\n      if (!this.standAlone) {\n        this.emitter.emit('did-change-scroll-top', this)\n      }\n    }))\n    subs.add(this.adapter.onDidChangeScrollLeft(() => {\n      if (!this.standAlone) {\n        this.emitter.emit('did-change-scroll-left', this)\n      }\n    }))\n\n    subs.add(this.textEditor.onDidChange((changes) => {\n      this.emitChanges(changes)\n    }))\n    subs.add(this.textEditor.onDidDestroy(() => { this.destroy() }))\n\n    /*\n    FIXME Some changes occuring during the tokenization produces\n    ranges that deceive the canvas rendering by making some\n    lines at the end of the buffer intact while they are in fact not,\n    resulting in extra lines appearing at the end of the minimap.\n    Forcing a whole repaint to fix that bug is suboptimal but works.\n    */\n    subs.add(this.textEditor.displayBuffer.onDidTokenize(() => {\n      this.emitter.emit('did-change-config')\n    }))\n  }\n\n  /**\n   * Destroys the model.\n   */\n  destroy () {\n    if (this.destroyed) { return }\n\n    this.removeAllDecorations()\n    this.subscriptions.dispose()\n    this.subscriptions = null\n    this.textEditor = null\n    this.emitter.emit('did-destroy')\n    this.emitter.dispose()\n    this.destroyed = true\n  }\n\n  /**\n   * Returns `true` when this `Minimap` has benn destroyed.\n   *\n   * @return {boolean} whether this Minimap has been destroyed or not\n   */\n  isDestroyed () { return this.destroyed }\n\n  /**\n   * Registers an event listener to the `did-change` event.\n   *\n   * @param  {function(event:Object):void} callback a function to call when the\n   *                                                event is triggered.\n   *                                                the callback will be called\n   *                                                with an event object with\n   *                                                the following properties:\n   * - start: The change's start row number\n   * - end: The change's end row number\n   * - screenDelta: the delta in buffer rows between the versions before and\n   *   after the change\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidChange (callback) {\n    return this.emitter.on('did-change', callback)\n  }\n\n  /**\n   * Registers an event listener to the `did-change-config` event.\n   *\n   * @param  {function():void} callback a function to call when the event\n   *                                    is triggered.\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidChangeConfig (callback) {\n    return this.emitter.on('did-change-config', callback)\n  }\n\n  /**\n   * Registers an event listener to the `did-change-scroll-top` event.\n   *\n   * The event is dispatched when the text editor `scrollTop` value have been\n   * changed or when the minimap scroll top have been changed in stand-alone\n   * mode.\n   *\n   * @param  {function(minimap:Minimap):void} callback a function to call when\n   *                                                   the event is triggered.\n   *                                                   The current Minimap is\n   *                                                   passed as argument to\n   *                                                   the callback.\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidChangeScrollTop (callback) {\n    return this.emitter.on('did-change-scroll-top', callback)\n  }\n\n  /**\n   * Registers an event listener to the `did-change-scroll-left` event.\n   *\n   * @param  {function(minimap:Minimap):void} callback a function to call when\n   *                                                   the event is triggered.\n   *                                                   The current Minimap is\n   *                                                   passed as argument to\n   *                                                   the callback.\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidChangeScrollLeft (callback) {\n    return this.emitter.on('did-change-scroll-left', callback)\n  }\n\n  /**\n   * Registers an event listener to the `did-change-stand-alone` event.\n   *\n   * This event is dispatched when the stand-alone of the current Minimap\n   * is either enabled or disabled.\n   *\n   * @param  {function(minimap:Minimap):void} callback a function to call when\n   *                                                   the event is triggered.\n   *                                                   The current Minimap is\n   *                                                   passed as argument to\n   *                                                   the callback.\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidChangeStandAlone (callback) {\n    return this.emitter.on('did-change-stand-alone', callback)\n  }\n\n  /**\n   * Registers an event listener to the `did-destroy` event.\n   *\n   * This event is dispatched when this Minimap have been destroyed. It can\n   * occurs either because the {@link destroy} method have been called on the\n   * Minimap or because the target text editor have been destroyed.\n   *\n   * @param  {function():void} callback a function to call when the event\n   *                                    is triggered.\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidDestroy (callback) {\n    return this.emitter.on('did-destroy', callback)\n  }\n\n  /**\n   * Returns `true` when the current Minimap is a stand-alone minimap.\n   *\n   * @return {boolean} whether this Minimap is in stand-alone mode or not.\n   */\n  isStandAlone () { return this.standAlone }\n\n  /**\n   * Sets the stand-alone mode for this minimap.\n   *\n   * @param {boolean} standAlone the new state of the stand-alone mode for this\n   *                             Minimap\n   */\n  setStandAlone (standAlone) {\n    if (standAlone !== this.standAlone) {\n      this.standAlone = standAlone\n      this.emitter.emit('did-change-stand-alone', this)\n    }\n  }\n\n  /**\n   * Returns the `TextEditor` that this minimap represents.\n   *\n   * @return {TextEditor} this Minimap's text editor\n   */\n  getTextEditor () { return this.textEditor }\n\n  /**\n   * Returns the height of the `TextEditor` at the Minimap scale.\n   *\n   * @return {number} the scaled height of the text editor\n   */\n  getTextEditorScaledHeight () {\n    return this.adapter.getHeight() * this.getVerticalScaleFactor()\n  }\n\n  /**\n   * Returns the `TextEditor` scroll top value at the Minimap scale.\n   *\n   * @return {number} the scaled scroll top of the text editor\n   */\n  getTextEditorScaledScrollTop () {\n    return this.adapter.getScrollTop() * this.getVerticalScaleFactor()\n  }\n\n  /**\n   * Returns the `TextEditor` scroll left value at the Minimap scale.\n   *\n   * @return {number} the scaled scroll left of the text editor\n   */\n  getTextEditorScaledScrollLeft () {\n    return this.adapter.getScrollLeft() * this.getHorizontalScaleFactor()\n  }\n\n  /**\n   * Returns the `TextEditor` maximum scroll top value.\n   *\n   * When the `scrollPastEnd` setting is enabled, the method compensate the\n   * extra scroll by removing the same height as added by the editor from the\n   * final value.\n   *\n   * @return {number} the maximum scroll top of the text editor\n   */\n  getTextEditorMaxScrollTop () { return this.adapter.getMaxScrollTop() }\n\n  /**\n   * Returns the `TextEditor` scroll top value.\n   *\n   * @return {number} the scroll top of the text editor\n   */\n  getTextEditorScrollTop () { return this.adapter.getScrollTop() }\n\n  /**\n   * Sets the scroll top of the `TextEditor`.\n   *\n   * @param {number} scrollTop the new scroll top value\n   */\n  setTextEditorScrollTop (scrollTop) { this.adapter.setScrollTop(scrollTop) }\n\n  /**\n   * Returns the `TextEditor` scroll left value.\n   *\n   * @return {number} the scroll left of the text editor\n   */\n  getTextEditorScrollLeft () { return this.adapter.getScrollLeft() }\n\n  /**\n   * Returns the height of the `TextEditor`.\n   *\n   * @return {number} the height of the text editor\n   */\n  getTextEditorHeight () { return this.adapter.getHeight() }\n\n  /**\n   * Returns the `TextEditor` scroll as a value normalized between `0` and `1`.\n   *\n   * When the `scrollPastEnd` setting is enabled the value may exceed `1` as the\n   * maximum scroll value used to compute this ratio compensate for the extra\n   * height in the editor. **Use {@link getCapedTextEditorScrollRatio} when\n   * you need a value that is strictly between `0` and `1`.**\n   *\n   * @return {number} the scroll ratio of the text editor\n   */\n  getTextEditorScrollRatio () {\n    return this.adapter.getScrollTop() / (this.getTextEditorMaxScrollTop() || 1)\n  }\n\n  /**\n   * Returns the `TextEditor` scroll as a value normalized between `0` and `1`.\n   *\n   * The returned value will always be strictly between `0` and `1`.\n   *\n   * @return {number} the scroll ratio of the text editor strictly between\n   *                  0 and 1\n   */\n  getCapedTextEditorScrollRatio () {\n    return Math.min(1, this.getTextEditorScrollRatio())\n  }\n\n  /**\n   * Returns the height of the whole minimap in pixels based on the `minimap`\n   * settings.\n   *\n   * @return {number} the height of the minimap\n   */\n  getHeight () {\n    return this.textEditor.getScreenLineCount() * this.getLineHeight()\n  }\n\n  /**\n   * Returns the width of the whole minimap in pixels based on the `minimap`\n   * settings.\n   *\n   * @return {number} the width of the minimap\n   */\n  getWidth () {\n    return this.textEditor.getMaxScreenLineLength() * this.getCharWidth()\n  }\n\n  /**\n   * Returns the height the Minimap content will take on screen.\n   *\n   * When the Minimap height is greater than the `TextEditor` height, the\n   * `TextEditor` height is returned instead.\n   *\n   * @return {number} the visible height of the Minimap\n   */\n  getVisibleHeight () {\n    return Math.min(this.getScreenHeight(), this.getHeight())\n  }\n\n  /**\n   * Returns the height the minimap should take once displayed, it's either\n   * the height of the `TextEditor` or the provided `height` when in stand-alone\n   * mode.\n   *\n   * @return {number} the total height of the Minimap\n   */\n  getScreenHeight () {\n    if (this.isStandAlone()) {\n      if (this.height != null) {\n        return this.height\n      } else {\n        return this.getHeight()\n      }\n    } else {\n      return this.adapter.getHeight()\n    }\n  }\n\n  /**\n   * Returns the width the whole Minimap will take on screen.\n   *\n   * @return {number} the width of the Minimap when displayed\n   */\n  getVisibleWidth () {\n    return Math.min(this.getScreenWidth(), this.getWidth())\n  }\n\n  /**\n   * Returns the width the Minimap should take once displayed, it's either the\n   * width of the Minimap content or the provided `width` when in standAlone\n   * mode.\n   *\n   * @return {number} the Minimap screen width\n   */\n  getScreenWidth () {\n    if (this.isStandAlone() && this.width != null) {\n      return this.width\n    } else {\n      return this.getWidth()\n    }\n  }\n\n  /**\n   * Sets the preferred height and width when in stand-alone mode.\n   *\n   * This method is called by the <MinimapElement> for this Minimap so that\n   * the model is kept in sync with the view.\n   *\n   * @param {number} height the new height of the Minimap\n   * @param {number} width the new width of the Minimap\n   */\n  setScreenHeightAndWidth (height, width) {\n    this.height = height\n    this.width = width\n  }\n\n  /**\n   * Returns the vertical scaling factor when converting coordinates from the\n   * `TextEditor` to the Minimap.\n   *\n   * @return {number} the Minimap vertical scaling factor\n   */\n  getVerticalScaleFactor () {\n    return this.getLineHeight() / this.textEditor.getLineHeightInPixels()\n  }\n\n  /**\n   * Returns the horizontal scaling factor when converting coordinates from the\n   * `TextEditor` to the Minimap.\n   *\n   * @return {number} the Minimap horizontal scaling factor\n   */\n  getHorizontalScaleFactor () {\n    return this.getCharWidth() / this.textEditor.getDefaultCharWidth()\n  }\n\n  /**\n   * Returns the height of a line in the Minimap in pixels.\n   *\n   * @return {number} a line's height in the Minimap\n   */\n  getLineHeight () { return this.getCharHeight() + this.getInterline() }\n\n  /**\n   * Returns the width of a character in the Minimap in pixels.\n   *\n   * @return {number} a character's width in the Minimap\n   */\n  getCharWidth () {\n    if (this.charWidth != null) {\n      return this.charWidth\n    } else {\n      return this.configCharWidth\n    }\n  }\n\n  /**\n   * Sets the char width for this Minimap. This value will override the\n   * value from the config for this instance only. A `did-change-config`\n   * event is dispatched.\n   *\n   * @param {number} charWidth the new width of a char in the Minimap\n   */\n  setCharWidth (charWidth) {\n    this.charWidth = Math.floor(charWidth)\n    this.emitter.emit('did-change-config')\n  }\n\n  /**\n   * Returns the height of a character in the Minimap in pixels.\n   *\n   * @return {number} a character's height in the Minimap\n   */\n  getCharHeight () {\n    if (this.charHeight != null) {\n      return this.charHeight\n    } else {\n      return this.configCharHeight\n    }\n  }\n\n  /**\n   * Sets the char height for this Minimap. This value will override the\n   * value from the config for this instance only. A `did-change-config`\n   * event is dispatched.\n   *\n   * @param {number} charHeight the new height of a char in the Minimap\n   */\n  setCharHeight (charHeight) {\n    this.charHeight = Math.floor(charHeight)\n    this.emitter.emit('did-change-config')\n  }\n\n  /**\n   * Returns the height of an interline in the Minimap in pixels.\n   *\n   * @return {number} the interline's height in the Minimap\n   */\n  getInterline () {\n    if (this.interline != null) {\n      return this.interline\n    } else {\n      return this.configInterline\n    }\n  }\n\n  /**\n   * Sets the interline height for this Minimap. This value will override the\n   * value from the config for this instance only. A `did-change-config`\n   * event is dispatched.\n   *\n   * @param {number} interline the new height of an interline in the Minimap\n   */\n  setInterline (interline) {\n    this.interline = Math.floor(interline)\n    this.emitter.emit('did-change-config')\n  }\n\n  /**\n   * Returns the index of the first visible row in the Minimap.\n   *\n   * @return {number} the index of the first visible row\n   */\n  getFirstVisibleScreenRow () {\n    return Math.floor(this.getScrollTop() / this.getLineHeight())\n  }\n\n  /**\n   * Returns the index of the last visible row in the Minimap.\n   *\n   * @return {number} the index of the last visible row\n   */\n  getLastVisibleScreenRow () {\n    return Math.ceil(\n      (this.getScrollTop() + this.getScreenHeight()) / this.getLineHeight()\n    )\n  }\n\n  /**\n   * Returns the current scroll of the Minimap.\n   *\n   * The Minimap can scroll only when its height is greater that the height\n   * of its `TextEditor`.\n   *\n   * @return {number} the scroll top of the Minimap\n   */\n  getScrollTop () {\n    if (this.standAlone) {\n      return this.scrollTop\n    } else {\n      return Math.abs(\n        this.getCapedTextEditorScrollRatio() * this.getMaxScrollTop()\n      )\n    }\n  }\n\n  /**\n   * Sets the minimap scroll top value when in stand-alone mode.\n   *\n   * @param {number} scrollTop the new scroll top for the Minimap\n   */\n  setScrollTop (scrollTop) {\n    this.scrollTop = scrollTop\n    if (this.standAlone) { this.emitter.emit('did-change-scroll-top', this) }\n  }\n\n  /**\n   * Returns the maximum scroll value of the Minimap.\n   *\n   * @return {number} the maximum scroll top for the Minimap\n   */\n  getMaxScrollTop () {\n    return Math.max(0, this.getHeight() - this.getScreenHeight())\n  }\n\n  /**\n   * Returns `true` when the Minimap can scroll.\n   *\n   * @return {boolean} whether this Minimap can scroll or not\n   */\n  canScroll () { return this.getMaxScrollTop() > 0 }\n\n  /**\n   * Delegates to `TextEditor#getMarker`.\n   *\n   * @access private\n   */\n  getMarker (id) { return this.textEditor.getMarker(id) }\n\n  /**\n   * Delegates to `TextEditor#findMarkers`.\n   *\n   * @access private\n   */\n  findMarkers (o) {\n    try {\n      return this.textEditor.findMarkers(o)\n    } catch (error) {\n      return []\n    }\n  }\n\n  /**\n   * Delegates to `TextEditor#markBufferRange`.\n   *\n   * @access private\n   */\n  markBufferRange (range) { return this.textEditor.markBufferRange(range) }\n\n  /**\n   * Emits a change events with the passed-in changes as data.\n   *\n   * @param  {Object} changes a change to dispatch\n   * @access private\n   */\n  emitChanges (changes) { this.emitter.emit('did-change', changes) }\n\n  /**\n   * Enables the cache at the adapter level to avoid consecutive access to the\n   * text editor API during a render phase.\n   *\n   * @access private\n   */\n  enableCache () { this.adapter.enableCache() }\n\n  /**\n   * Disable the adapter cache.\n   *\n   * @access private\n   */\n  clearCache () { this.adapter.clearCache() }\n}\n"
  },
  {
    "__docId__": 281,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "nextModelId",
    "memberof": "lib/minimap.js",
    "longname": "lib/minimap.js~nextModelId",
    "access": null,
    "export": false,
    "importPath": "minimap/lib/minimap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Minimap",
    "memberof": "lib/minimap.js",
    "longname": "lib/minimap.js~Minimap",
    "access": null,
    "export": true,
    "importPath": "minimap/lib/minimap.js",
    "importStyle": "Minimap",
    "description": "The Minimap class is the underlying model of a <MinimapElement>.\nMost manipulations of the minimap is done through the model.\n\nAny Minimap instance is tied to a `TextEditor`.\nTheir lifecycle follow the one of their target `TextEditor`, so they are\ndestroyed whenever their `TextEditor` is destroyed.",
    "lineNumber": 20,
    "interface": false
  },
  {
    "__docId__": 283,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#constructor",
    "access": null,
    "description": "Creates a new Minimap instance for the given `TextEditor`.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "an object with the new Minimap properties"
      },
      {
        "nullable": null,
        "types": [
          "TextEditor"
        ],
        "spread": false,
        "optional": false,
        "name": "options.textEditor",
        "description": "the target text editor for\n                                        the minimap"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.standAlone",
        "description": "whether this minimap is in\n                                       stand-alone mode or not"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.width",
        "description": "the minimap width in pixels"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.height",
        "description": "the minimap height in pixels"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Cannot create a minimap without an editor"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 284,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "textEditor",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#textEditor",
    "access": "private",
    "description": "The Minimap's text editor.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "TextEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "standAlone",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#standAlone",
    "access": "private",
    "description": "The stand-alone state of the current Minimap.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#width",
    "access": "private",
    "description": "The width of the current Minimap.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#height",
    "access": "private",
    "description": "The height of the current Minimap.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#id",
    "access": "private",
    "description": "The id of the current Minimap.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "emitter",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#emitter",
    "access": "private",
    "description": "The events emitter of the current Minimap.",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "Emitter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subscriptions",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#subscriptions",
    "access": "private",
    "description": "The Minimap's subscriptions.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "CompositeDisposable"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "adapter",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#adapter",
    "access": "private",
    "description": "The adapter object leverage the access to several properties from\nthe `TextEditor`/`TextEditorElement` to support the different APIs\nbetween different version of Atom.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "charHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#charHeight",
    "access": "private",
    "description": "The char height of the current Minimap, will be `undefined` unless\n`setCharWidth` is called.",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "configCharHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#configCharHeight",
    "access": "private",
    "description": "The char height from the package's configuration. Will be overriden\nby the instance value.",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "charWidth",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#charWidth",
    "access": "private",
    "description": "The char width of the current Minimap, will be `undefined` unless\n`setCharWidth` is called.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "configCharWidth",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#configCharWidth",
    "access": "private",
    "description": "The char width from the package's configuration. Will be overriden\nby the instance value.",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 296,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "interline",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#interline",
    "access": "private",
    "description": "The interline of the current Minimap, will be `undefined` unless\n`setCharWidth` is called.",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 297,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "configInterline",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#configInterline",
    "access": "private",
    "description": "The interline from the package's configuration. Will be overriden\nby the instance value.",
    "lineNumber": 143,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 298,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "destroyed",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#destroyed",
    "access": "private",
    "description": "A boolean value to store whether this Minimap have been destroyed or not.",
    "lineNumber": 150,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 299,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrollPastEnd",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#scrollPastEnd",
    "access": "private",
    "description": "A boolean value to store whether the `scrollPastEnd` setting is enabled\nor not.",
    "lineNumber": 158,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "adapter",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#adapter",
    "access": null,
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "adapter",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#adapter",
    "access": null,
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrollTop",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#scrollTop",
    "access": "private",
    "description": "When in stand-alone mode, a Minimap doesn't scroll and will use this\nvalue instead.",
    "lineNumber": 176,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrollPastEnd",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#scrollPastEnd",
    "access": null,
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "configCharHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#configCharHeight",
    "access": null,
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "configCharWidth",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#configCharWidth",
    "access": null,
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "configInterline",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#configInterline",
    "access": null,
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#destroy",
    "access": null,
    "description": "Destroys the model.",
    "lineNumber": 229,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 308,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subscriptions",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#subscriptions",
    "access": null,
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "textEditor",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#textEditor",
    "access": null,
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "destroyed",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#destroyed",
    "access": null,
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isDestroyed",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#isDestroyed",
    "access": null,
    "description": "Returns `true` when this `Minimap` has benn destroyed.",
    "lineNumber": 246,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether this Minimap has been destroyed or not"
    },
    "generator": false
  },
  {
    "__docId__": 312,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidChange",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#onDidChange",
    "access": null,
    "description": "Registers an event listener to the `did-change` event.",
    "lineNumber": 262,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(event:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call when the\n                                               event is triggered.\n                                               the callback will be called\n                                               with an event object with\n                                               the following properties:\n- start: The change's start row number\n- end: The change's end row number\n- screenDelta: the delta in buffer rows between the versions before and\n  after the change"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 313,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidChangeConfig",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#onDidChangeConfig",
    "access": null,
    "description": "Registers an event listener to the `did-change-config` event.",
    "lineNumber": 273,
    "params": [
      {
        "nullable": null,
        "types": [
          "function():void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call when the event\n                                   is triggered."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 314,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidChangeScrollTop",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#onDidChangeScrollTop",
    "access": null,
    "description": "Registers an event listener to the `did-change-scroll-top` event.\n\nThe event is dispatched when the text editor `scrollTop` value have been\nchanged or when the minimap scroll top have been changed in stand-alone\nmode.",
    "lineNumber": 291,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(minimap:Minimap):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call when\n                                                  the event is triggered.\n                                                  The current Minimap is\n                                                  passed as argument to\n                                                  the callback."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 315,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidChangeScrollLeft",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#onDidChangeScrollLeft",
    "access": null,
    "description": "Registers an event listener to the `did-change-scroll-left` event.",
    "lineNumber": 305,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(minimap:Minimap):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call when\n                                                  the event is triggered.\n                                                  The current Minimap is\n                                                  passed as argument to\n                                                  the callback."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 316,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidChangeStandAlone",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#onDidChangeStandAlone",
    "access": null,
    "description": "Registers an event listener to the `did-change-stand-alone` event.\n\nThis event is dispatched when the stand-alone of the current Minimap\nis either enabled or disabled.",
    "lineNumber": 322,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(minimap:Minimap):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call when\n                                                  the event is triggered.\n                                                  The current Minimap is\n                                                  passed as argument to\n                                                  the callback."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 317,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidDestroy",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#onDidDestroy",
    "access": null,
    "description": "Registers an event listener to the `did-destroy` event.\n\nThis event is dispatched when this Minimap have been destroyed. It can\noccurs either because the {@link destroy} method have been called on the\nMinimap or because the target text editor have been destroyed.",
    "lineNumber": 337,
    "params": [
      {
        "nullable": null,
        "types": [
          "function():void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call when the event\n                                   is triggered."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 318,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isStandAlone",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#isStandAlone",
    "access": null,
    "description": "Returns `true` when the current Minimap is a stand-alone minimap.",
    "lineNumber": 346,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether this Minimap is in stand-alone mode or not."
    },
    "generator": false
  },
  {
    "__docId__": 319,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setStandAlone",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#setStandAlone",
    "access": null,
    "description": "Sets the stand-alone mode for this minimap.",
    "lineNumber": 354,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "standAlone",
        "description": "the new state of the stand-alone mode for this\n                            Minimap"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 320,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "standAlone",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#standAlone",
    "access": null,
    "description": null,
    "lineNumber": 356,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditor",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getTextEditor",
    "access": null,
    "description": "Returns the `TextEditor` that this minimap represents.",
    "lineNumber": 366,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "TextEditor"
      ],
      "spread": false,
      "description": "this Minimap's text editor"
    },
    "generator": false
  },
  {
    "__docId__": 322,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditorScaledHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getTextEditorScaledHeight",
    "access": null,
    "description": "Returns the height of the `TextEditor` at the Minimap scale.",
    "lineNumber": 373,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the scaled height of the text editor"
    },
    "generator": false
  },
  {
    "__docId__": 323,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditorScaledScrollTop",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getTextEditorScaledScrollTop",
    "access": null,
    "description": "Returns the `TextEditor` scroll top value at the Minimap scale.",
    "lineNumber": 382,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the scaled scroll top of the text editor"
    },
    "generator": false
  },
  {
    "__docId__": 324,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditorScaledScrollLeft",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getTextEditorScaledScrollLeft",
    "access": null,
    "description": "Returns the `TextEditor` scroll left value at the Minimap scale.",
    "lineNumber": 391,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the scaled scroll left of the text editor"
    },
    "generator": false
  },
  {
    "__docId__": 325,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditorMaxScrollTop",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getTextEditorMaxScrollTop",
    "access": null,
    "description": "Returns the `TextEditor` maximum scroll top value.\n\nWhen the `scrollPastEnd` setting is enabled, the method compensate the\nextra scroll by removing the same height as added by the editor from the\nfinal value.",
    "lineNumber": 404,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the maximum scroll top of the text editor"
    },
    "generator": false
  },
  {
    "__docId__": 326,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditorScrollTop",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getTextEditorScrollTop",
    "access": null,
    "description": "Returns the `TextEditor` scroll top value.",
    "lineNumber": 411,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the scroll top of the text editor"
    },
    "generator": false
  },
  {
    "__docId__": 327,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setTextEditorScrollTop",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#setTextEditorScrollTop",
    "access": null,
    "description": "Sets the scroll top of the `TextEditor`.",
    "lineNumber": 418,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "scrollTop",
        "description": "the new scroll top value"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 328,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditorScrollLeft",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getTextEditorScrollLeft",
    "access": null,
    "description": "Returns the `TextEditor` scroll left value.",
    "lineNumber": 425,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the scroll left of the text editor"
    },
    "generator": false
  },
  {
    "__docId__": 329,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditorHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getTextEditorHeight",
    "access": null,
    "description": "Returns the height of the `TextEditor`.",
    "lineNumber": 432,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the height of the text editor"
    },
    "generator": false
  },
  {
    "__docId__": 330,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextEditorScrollRatio",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getTextEditorScrollRatio",
    "access": null,
    "description": "Returns the `TextEditor` scroll as a value normalized between `0` and `1`.\n\nWhen the `scrollPastEnd` setting is enabled the value may exceed `1` as the\nmaximum scroll value used to compute this ratio compensate for the extra\nheight in the editor. **Use {@link getCapedTextEditorScrollRatio} when\nyou need a value that is strictly between `0` and `1`.**",
    "lineNumber": 444,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the scroll ratio of the text editor"
    },
    "generator": false
  },
  {
    "__docId__": 331,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getCapedTextEditorScrollRatio",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getCapedTextEditorScrollRatio",
    "access": null,
    "description": "Returns the `TextEditor` scroll as a value normalized between `0` and `1`.\n\nThe returned value will always be strictly between `0` and `1`.",
    "lineNumber": 456,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the scroll ratio of the text editor strictly between\n                 0 and 1"
    },
    "generator": false
  },
  {
    "__docId__": 332,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getHeight",
    "access": null,
    "description": "Returns the height of the whole minimap in pixels based on the `minimap`\nsettings.",
    "lineNumber": 466,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the height of the minimap"
    },
    "generator": false
  },
  {
    "__docId__": 333,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getWidth",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getWidth",
    "access": null,
    "description": "Returns the width of the whole minimap in pixels based on the `minimap`\nsettings.",
    "lineNumber": 476,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the width of the minimap"
    },
    "generator": false
  },
  {
    "__docId__": 334,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getVisibleHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getVisibleHeight",
    "access": null,
    "description": "Returns the height the Minimap content will take on screen.\n\nWhen the Minimap height is greater than the `TextEditor` height, the\n`TextEditor` height is returned instead.",
    "lineNumber": 488,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the visible height of the Minimap"
    },
    "generator": false
  },
  {
    "__docId__": 335,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getScreenHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getScreenHeight",
    "access": null,
    "description": "Returns the height the minimap should take once displayed, it's either\nthe height of the `TextEditor` or the provided `height` when in stand-alone\nmode.",
    "lineNumber": 499,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the total height of the Minimap"
    },
    "generator": false
  },
  {
    "__docId__": 336,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getVisibleWidth",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getVisibleWidth",
    "access": null,
    "description": "Returns the width the whole Minimap will take on screen.",
    "lineNumber": 516,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the width of the Minimap when displayed"
    },
    "generator": false
  },
  {
    "__docId__": 337,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getScreenWidth",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getScreenWidth",
    "access": null,
    "description": "Returns the width the Minimap should take once displayed, it's either the\nwidth of the Minimap content or the provided `width` when in standAlone\nmode.",
    "lineNumber": 527,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the Minimap screen width"
    },
    "generator": false
  },
  {
    "__docId__": 338,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setScreenHeightAndWidth",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#setScreenHeightAndWidth",
    "access": null,
    "description": "Sets the preferred height and width when in stand-alone mode.\n\nThis method is called by the <MinimapElement> for this Minimap so that\nthe model is kept in sync with the view.",
    "lineNumber": 544,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "the new height of the Minimap"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "the new width of the Minimap"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 339,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#height",
    "access": null,
    "description": null,
    "lineNumber": 545,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#width",
    "access": null,
    "description": null,
    "lineNumber": 546,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getVerticalScaleFactor",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getVerticalScaleFactor",
    "access": null,
    "description": "Returns the vertical scaling factor when converting coordinates from the\n`TextEditor` to the Minimap.",
    "lineNumber": 555,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the Minimap vertical scaling factor"
    },
    "generator": false
  },
  {
    "__docId__": 342,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getHorizontalScaleFactor",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getHorizontalScaleFactor",
    "access": null,
    "description": "Returns the horizontal scaling factor when converting coordinates from the\n`TextEditor` to the Minimap.",
    "lineNumber": 565,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the Minimap horizontal scaling factor"
    },
    "generator": false
  },
  {
    "__docId__": 343,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLineHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getLineHeight",
    "access": null,
    "description": "Returns the height of a line in the Minimap in pixels.",
    "lineNumber": 574,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "a line's height in the Minimap"
    },
    "generator": false
  },
  {
    "__docId__": 344,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getCharWidth",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getCharWidth",
    "access": null,
    "description": "Returns the width of a character in the Minimap in pixels.",
    "lineNumber": 581,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "a character's width in the Minimap"
    },
    "generator": false
  },
  {
    "__docId__": 345,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setCharWidth",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#setCharWidth",
    "access": null,
    "description": "Sets the char width for this Minimap. This value will override the\nvalue from the config for this instance only. A `did-change-config`\nevent is dispatched.",
    "lineNumber": 596,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "charWidth",
        "description": "the new width of a char in the Minimap"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 346,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "charWidth",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#charWidth",
    "access": null,
    "description": null,
    "lineNumber": 597,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getCharHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getCharHeight",
    "access": null,
    "description": "Returns the height of a character in the Minimap in pixels.",
    "lineNumber": 606,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "a character's height in the Minimap"
    },
    "generator": false
  },
  {
    "__docId__": 348,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setCharHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#setCharHeight",
    "access": null,
    "description": "Sets the char height for this Minimap. This value will override the\nvalue from the config for this instance only. A `did-change-config`\nevent is dispatched.",
    "lineNumber": 621,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "charHeight",
        "description": "the new height of a char in the Minimap"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 349,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "charHeight",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#charHeight",
    "access": null,
    "description": null,
    "lineNumber": 622,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getInterline",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getInterline",
    "access": null,
    "description": "Returns the height of an interline in the Minimap in pixels.",
    "lineNumber": 631,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the interline's height in the Minimap"
    },
    "generator": false
  },
  {
    "__docId__": 351,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setInterline",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#setInterline",
    "access": null,
    "description": "Sets the interline height for this Minimap. This value will override the\nvalue from the config for this instance only. A `did-change-config`\nevent is dispatched.",
    "lineNumber": 646,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "interline",
        "description": "the new height of an interline in the Minimap"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 352,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "interline",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#interline",
    "access": null,
    "description": null,
    "lineNumber": 647,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getFirstVisibleScreenRow",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getFirstVisibleScreenRow",
    "access": null,
    "description": "Returns the index of the first visible row in the Minimap.",
    "lineNumber": 656,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the index of the first visible row"
    },
    "generator": false
  },
  {
    "__docId__": 354,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getLastVisibleScreenRow",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getLastVisibleScreenRow",
    "access": null,
    "description": "Returns the index of the last visible row in the Minimap.",
    "lineNumber": 665,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the index of the last visible row"
    },
    "generator": false
  },
  {
    "__docId__": 355,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getScrollTop",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getScrollTop",
    "access": null,
    "description": "Returns the current scroll of the Minimap.\n\nThe Minimap can scroll only when its height is greater that the height\nof its `TextEditor`.",
    "lineNumber": 679,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the scroll top of the Minimap"
    },
    "generator": false
  },
  {
    "__docId__": 356,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setScrollTop",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#setScrollTop",
    "access": null,
    "description": "Sets the minimap scroll top value when in stand-alone mode.",
    "lineNumber": 694,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "scrollTop",
        "description": "the new scroll top for the Minimap"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 357,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrollTop",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#scrollTop",
    "access": null,
    "description": null,
    "lineNumber": 695,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getMaxScrollTop",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getMaxScrollTop",
    "access": null,
    "description": "Returns the maximum scroll value of the Minimap.",
    "lineNumber": 704,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the maximum scroll top for the Minimap"
    },
    "generator": false
  },
  {
    "__docId__": 359,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "canScroll",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#canScroll",
    "access": null,
    "description": "Returns `true` when the Minimap can scroll.",
    "lineNumber": 713,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether this Minimap can scroll or not"
    },
    "generator": false
  },
  {
    "__docId__": 360,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getMarker",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#getMarker",
    "access": "private",
    "description": "Delegates to `TextEditor#getMarker`.",
    "lineNumber": 720,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 361,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "findMarkers",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#findMarkers",
    "access": "private",
    "description": "Delegates to `TextEditor#findMarkers`.",
    "lineNumber": 727,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 362,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "markBufferRange",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#markBufferRange",
    "access": "private",
    "description": "Delegates to `TextEditor#markBufferRange`.",
    "lineNumber": 740,
    "params": [
      {
        "name": "range",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 363,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "emitChanges",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#emitChanges",
    "access": "private",
    "description": "Emits a change events with the passed-in changes as data.",
    "lineNumber": 748,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "changes",
        "description": "a change to dispatch"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 364,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "enableCache",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#enableCache",
    "access": "private",
    "description": "Enables the cache at the adapter level to avoid consecutive access to the\ntext editor API during a render phase.",
    "lineNumber": 756,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 365,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearCache",
    "memberof": "lib/minimap.js~Minimap",
    "longname": "lib/minimap.js~Minimap#clearCache",
    "access": "private",
    "description": "Disable the adapter cache.",
    "lineNumber": 763,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 366,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/mixins/canvas-drawer.js",
    "memberof": null,
    "longname": "lib/mixins/canvas-drawer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\nimport _ from 'underscore-plus'\nimport Mixin from 'mixto'\n\n/**\n * The `CanvasDrawer` mixin is responsible for the rendering of a `Minimap`\n * in a `canvas` element.\n *\n * This mixin is injected in the `MinimapElement` prototype, so all these\n * methods  are available on any `MinimapElement` instance.\n */\nexport default class CanvasDrawer extends Mixin {\n  /**\n   * Initializes the canvas elements needed to perform the `Minimap` rendering.\n   */\n  initializeCanvas () {\n    /**\n     * The onscreen canvas.\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas = document.createElement('canvas')\n    /**\n     * The onscreen canvas context.\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = this.canvas.getContext('2d')\n    this.canvas.webkitImageSmoothingEnabled = false\n    this.context.imageSmoothingEnabled = false\n\n    /**\n    * The offscreen canvas.\n    * @type {HTMLCanvasElement}\n    * @access private\n    */\n    this.offscreenCanvas = document.createElement('canvas')\n    /**\n     * The offscreen canvas context.\n     * @type {CanvasRenderingContext2D}\n     * @access private\n     */\n    this.offscreenContext = this.offscreenCanvas.getContext('2d')\n    this.offscreenCanvas.webkitImageSmoothingEnabled = false\n    this.offscreenContext.imageSmoothingEnabled = false\n\n    if (!this.pendingChanges) {\n      /**\n       * Stores the changes from the text editor and the minimap.\n       * @type {Array<Object>}\n       * @access private\n       */\n      this.pendingChanges = []\n    }\n  }\n\n  /**\n   * Performs an update of the rendered `Minimap` based on the changes\n   * registered in the instance.\n   */\n  updateCanvas () {\n    let firstRow = this.minimap.getFirstVisibleScreenRow()\n    let lastRow = this.minimap.getLastVisibleScreenRow()\n    let intactRanges = this.computeIntactRanges(firstRow, lastRow)\n    let context = this.context\n\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\n    if (intactRanges.length === 0) {\n      this.drawLines(context, firstRow, lastRow, 0)\n    } else {\n      for (let j = 0, len = intactRanges.length; j < len; j++) {\n        let intact = intactRanges[j]\n        this.copyBitmapPart(context, this.offscreenCanvas, intact.offscreenRow, intact.start - firstRow, intact.end - intact.start)\n      }\n      this.fillGapsBetweenIntactRanges(context, intactRanges, firstRow, lastRow)\n    }\n\n    this.offscreenCanvas.width = this.canvas.width\n    this.offscreenCanvas.height = this.canvas.height\n    this.offscreenContext.drawImage(this.canvas, 0, 0)\n    /**\n     * The first row in the last render of the offscreen canvas.\n     * @type {number}\n     * @access private\n     */\n    this.offscreenFirstRow = firstRow\n    /**\n     * The last row in the last render of the offscreen canvas.\n     * @type {number}\n     * @access private\n     */\n    this.offscreenLastRow = lastRow\n  }\n\n  //     ######   #######  ##        #######  ########   ######\n  //    ##    ## ##     ## ##       ##     ## ##     ## ##    ##\n  //    ##       ##     ## ##       ##     ## ##     ## ##\n  //    ##       ##     ## ##       ##     ## ########   ######\n  //    ##       ##     ## ##       ##     ## ##   ##         ##\n  //    ##    ## ##     ## ##       ##     ## ##    ##  ##    ##\n  //     ######   #######  ########  #######  ##     ##  ######\n\n  /**\n   * Returns the opacity value to use when rendering the `Minimap` text.\n   *\n   * @return {Number} the text opacity value\n   */\n  getTextOpacity () { return this.textOpacity }\n\n  /**\n   * Returns the default text color for an editor content.\n   *\n   * The color value is directly read from the `TextEditorView` computed styles.\n   *\n   * @return {string} a CSS color\n   */\n  getDefaultColor () {\n    let color = this.retrieveStyleFromDom(['.editor'], 'color', false, true)\n    return this.transparentize(color, this.getTextOpacity())\n  }\n\n  /**\n   * Returns the text color for the passed-in `token` object.\n   *\n   * The color value is read from the DOM by creating a node structure that\n   * match the token `scope` property.\n   *\n   * @param  {Object} token a `TextEditor` token\n   * @return {string} the CSS color for the provided token\n   */\n  getTokenColor (token) {\n    let scopes = token.scopeDescriptor || token.scopes\n    let color = this.retrieveStyleFromDom(scopes, 'color')\n\n    return this.transparentize(color, this.getTextOpacity())\n  }\n\n  /**\n   * Returns the background color for the passed-in `decoration` object.\n   *\n   * The color value is read from the DOM by creating a node structure that\n   * match the decoration `scope` property unless the decoration provides\n   * its own `color` property.\n   *\n   * @param  {Decoration} decoration the decoration to get the color for\n   * @return {string} the CSS color for the provided decoration\n   */\n  getDecorationColor (decoration) {\n    let properties = decoration.getProperties()\n    if (properties.color) { return properties.color }\n\n    let scopeString = properties.scope.split(/\\s+/)\n    return this.retrieveStyleFromDom(scopeString, 'background-color', false)\n  }\n\n  /**\n   * Converts a `rgb(...)` color into a `rgba(...)` color with the specified\n   * opacity.\n   *\n   * @param  {string} color the CSS RGB color to transparentize\n   * @param  {number} [opacity=1] the opacity amount\n   * @return {string} the transparentized CSS color\n   * @access private\n   */\n  transparentize (color, opacity = 1) {\n    return color.replace('rgb(', 'rgba(').replace(')', `, ${opacity})`)\n  }\n\n  //    ########  ########     ###    ##      ##\n  //    ##     ## ##     ##   ## ##   ##  ##  ##\n  //    ##     ## ##     ##  ##   ##  ##  ##  ##\n  //    ##     ## ########  ##     ## ##  ##  ##\n  //    ##     ## ##   ##   ######### ##  ##  ##\n  //    ##     ## ##    ##  ##     ## ##  ##  ##\n  //    ########  ##     ## ##     ##  ###  ###\n\n  /**\n   * Draws lines on the passed-in `context`.\n   *\n   * The lines range to draw is specified by the `firstRow` and `lastRow`\n   * parameters.\n   *\n   * @param  {CanvasRenderingContext2D} context the canvas's context where\n   *                                            drawing the lines\n   * @param  {number} firstRow the first row to render\n   * @param  {number} lastRow the last row to render\n   * @param  {number} offsetRow the relative offset to apply to rows when\n   *                            rendering them\n   * @access private\n   */\n  drawLines (context, firstRow, lastRow, offsetRow) {\n    if (firstRow > lastRow) { return }\n\n    let lines = this.getTextEditor().tokenizedLinesForScreenRows(firstRow, lastRow)\n    let lineHeight = this.minimap.getLineHeight() * devicePixelRatio\n    let charHeight = this.minimap.getCharHeight() * devicePixelRatio\n    let charWidth = this.minimap.getCharWidth() * devicePixelRatio\n    let canvasWidth = this.canvas.width\n    let canvasHeight = this.canvas.height\n    let displayCodeHighlights = this.displayCodeHighlights\n    let decorations = this.minimap.decorationsByTypeThenRows(firstRow, lastRow)\n\n    let line = lines[0]\n    let invisibleRegExp = this.getInvisibleRegExp(line)\n\n    let renderData = {\n      context: context,\n      canvasWidth: canvasWidth,\n      canvasHeight: canvasHeight,\n      lineHeight: lineHeight,\n      charWidth: charWidth,\n      charHeight: charHeight\n    }\n\n    for (let i = 0, len = lines.length; i < len; i++) {\n      line = lines[i]\n      let screenRow = firstRow + i\n      let x = 0\n\n      renderData.row = offsetRow + i\n      renderData.yRow = renderData.row * lineHeight\n      renderData.screenRow = screenRow\n\n      this.drawDecorations(screenRow, decorations, 'line', renderData, this.drawLineDecoration)\n\n      this.drawDecorations(screenRow, decorations, 'highlight-under', renderData, this.drawHighlightDecoration)\n\n      if ((line != null ? line.tokens : void 0) != null) {\n        let tokens = line.tokens\n        for (let j = 0, tokensCount = tokens.length; j < tokensCount; j++) {\n          let token = tokens[j]\n          let w = token.screenDelta\n          if (!token.isOnlyWhitespace()) {\n            let color = displayCodeHighlights ? this.getTokenColor(token) : this.getDefaultColor()\n\n            let value = token.value\n            if (invisibleRegExp != null) {\n              value = value.replace(invisibleRegExp, ' ')\n            }\n            x = this.drawToken(context, value, color, x, renderData.yRow, charWidth, charHeight)\n          } else {\n            x += w * charWidth\n          }\n\n          if (x > canvasWidth) { break }\n        }\n      }\n\n      this.drawDecorations(screenRow, decorations, 'highlight-over', renderData, this.drawHighlightDecoration)\n\n      this.drawDecorations(screenRow, decorations, 'highlight-outline', renderData, this.drawHighlightOutlineDecoration)\n    }\n\n    context.fill()\n  }\n\n  /**\n   * Returns the regexp to replace invisibles substitution characters\n   * in editor lines.\n   *\n   * @param  {TokenizedLine} line a tokenized lize to read the invisible\n   *                              characters\n   * @return {RegExp} the regular expression to match invisible characters\n   * @access private\n   */\n  getInvisibleRegExp (line) {\n    if ((line != null) && (line.invisibles != null)) {\n      let invisibles = []\n      if (line.invisibles.cr != null) { invisibles.push(line.invisibles.cr) }\n      if (line.invisibles.eol != null) { invisibles.push(line.invisibles.eol) }\n      if (line.invisibles.space != null) { invisibles.push(line.invisibles.space) }\n      if (line.invisibles.tab != null) { invisibles.push(line.invisibles.tab) }\n\n      return RegExp(invisibles.filter((s) => {\n        return typeof s === 'string'\n      }).map(_.escapeRegExp).join('|'), 'g')\n    }\n  }\n\n  /**\n   * Draws a single token on the given context.\n   *\n   * @param  {CanvasRenderingContext2D} context the target canvas context\n   * @param  {string} text the token's text content\n   * @param  {string} color the token's CSS color\n   * @param  {number} x the x position of the token in the line\n   * @param  {number} y the y position of the line in the minimap\n   * @param  {number} charWidth the width of a character in the minimap\n   * @param  {number} charHeight the height of a character in the minimap\n   * @return {number} the x position at the end of the token\n   * @access private\n   */\n  drawToken (context, text, color, x, y, charWidth, charHeight) {\n    context.fillStyle = color\n\n    let chars = 0\n    for (let j = 0, len = text.length; j < len; j++) {\n      let char = text[j]\n      if (/\\s/.test(char)) {\n        if (chars > 0) {\n          context.fillRect(x - (chars * charWidth), y, chars * charWidth, charHeight)\n        }\n        chars = 0\n      } else {\n        chars++\n      }\n      x += charWidth\n    }\n    if (chars > 0) {\n      context.fillRect(x - (chars * charWidth), y, chars * charWidth, charHeight)\n    }\n    return x\n  }\n\n  /**\n   * Draws the specified decorations for the current `screenRow`.\n   *\n   * The `decorations` object contains all the decorations grouped by type and\n   * then rows.\n   *\n   * @param  {number} screenRow the screen row index for which\n   *                            render decorations\n   * @param  {Object} decorations the object containing all the decorations\n   * @param  {string} type the type of decorations to render\n   * @param  {Object} renderData the object containing the render data\n   * @param  {Fundtion} renderMethod the method to call to render\n   *                                 the decorations\n   * @access private\n   */\n  drawDecorations (screenRow, decorations, type, renderData, renderMethod) {\n    let ref\n    decorations = (ref = decorations[type]) != null ? ref[screenRow] : void 0\n\n    if (decorations != null ? decorations.length : void 0) {\n      for (let i = 0, len = decorations.length; i < len; i++) {\n        renderMethod.call(this, decorations[i], renderData)\n      }\n    }\n  }\n\n  /**\n   * Draws a line decoration.\n   *\n   * @param  {Decoration} decoration the decoration to render\n   * @param  {Object} data the data need to perform the render\n   * @access private\n   */\n  drawLineDecoration (decoration, data) {\n    data.context.fillStyle = this.getDecorationColor(decoration)\n    data.context.fillRect(0, data.yRow, data.canvasWidth, data.lineHeight)\n  }\n\n  /**\n   * Draws a highlight decoration.\n   *\n   * It renders only the part of the highlight corresponding to the specified\n   * row.\n   *\n   * @param  {Decoration} decoration the decoration to render\n   * @param  {Object} data the data need to perform the render\n   * @access private\n   */\n  drawHighlightDecoration (decoration, data) {\n    let range = decoration.getMarker().getScreenRange()\n    let rowSpan = range.end.row - range.start.row\n\n    data.context.fillStyle = this.getDecorationColor(decoration)\n\n    if (rowSpan === 0) {\n      let colSpan = range.end.column - range.start.column\n      data.context.fillRect(range.start.column * data.charWidth, data.yRow, colSpan * data.charWidth, data.lineHeight)\n    } else if (data.screenRow === range.start.row) {\n      let x = range.start.column * data.charWidth\n      data.context.fillRect(x, data.yRow, data.canvasWidth - x, data.lineHeight)\n    } else if (data.screenRow === range.end.row) {\n      data.context.fillRect(0, data.yRow, range.end.column * data.charWidth, data.lineHeight)\n    } else {\n      data.context.fillRect(0, data.yRow, data.canvasWidth, data.lineHeight)\n    }\n  }\n\n  /**\n   * Draws a highlight outline decoration.\n   *\n   * It renders only the part of the highlight corresponding to the specified\n   * row.\n   *\n   * @param  {Decoration} decoration the decoration to render\n   * @param  {Object} data the data need to perform the render\n   * @access private\n   */\n  drawHighlightOutlineDecoration (decoration, data) {\n    let bottomWidth, colSpan, width, xBottomStart, xEnd, xStart\n    let {lineHeight, charWidth, canvasWidth, screenRow} = data\n    let range = decoration.getMarker().getScreenRange()\n    let rowSpan = range.end.row - range.start.row\n    let yStart = data.yRow\n    let yEnd = yStart + lineHeight\n\n    data.context.fillStyle = this.getDecorationColor(decoration)\n\n    if (rowSpan === 0) {\n      colSpan = range.end.column - range.start.column\n      width = colSpan * charWidth\n      xStart = range.start.column * charWidth\n      xEnd = xStart + width\n\n      data.context.fillRect(xStart, yStart, width, 1)\n      data.context.fillRect(xStart, yEnd, width, 1)\n      data.context.fillRect(xStart, yStart, 1, lineHeight)\n      data.context.fillRect(xEnd, yStart, 1, lineHeight)\n    } else if (rowSpan === 1) {\n      xStart = range.start.column * data.charWidth\n      xEnd = range.end.column * data.charWidth\n\n      if (screenRow === range.start.row) {\n        width = data.canvasWidth - xStart\n        xBottomStart = Math.max(xStart, xEnd)\n        bottomWidth = data.canvasWidth - xBottomStart\n\n        data.context.fillRect(xStart, yStart, width, 1)\n        data.context.fillRect(xBottomStart, yEnd, bottomWidth, 1)\n        data.context.fillRect(xStart, yStart, 1, lineHeight)\n        data.context.fillRect(canvasWidth - 1, yStart, 1, lineHeight)\n      } else {\n        width = canvasWidth - xStart\n        bottomWidth = canvasWidth - xEnd\n\n        data.context.fillRect(0, yStart, xStart, 1)\n        data.context.fillRect(0, yEnd, xEnd, 1)\n        data.context.fillRect(0, yStart, 1, lineHeight)\n        data.context.fillRect(xEnd, yStart, 1, lineHeight)\n      }\n    } else {\n      xStart = range.start.column * charWidth\n      xEnd = range.end.column * charWidth\n      if (screenRow === range.start.row) {\n        width = canvasWidth - xStart\n\n        data.context.fillRect(xStart, yStart, width, 1)\n        data.context.fillRect(xStart, yStart, 1, lineHeight)\n        data.context.fillRect(canvasWidth - 1, yStart, 1, lineHeight)\n      } else if (screenRow === range.end.row) {\n        width = canvasWidth - xStart\n\n        data.context.fillRect(0, yEnd, xEnd, 1)\n        data.context.fillRect(0, yStart, 1, lineHeight)\n        data.context.fillRect(xEnd, yStart, 1, lineHeight)\n      } else {\n        data.context.fillRect(0, yStart, 1, lineHeight)\n        data.context.fillRect(canvasWidth - 1, yStart, 1, lineHeight)\n        if (screenRow === range.start.row + 1) {\n          data.context.fillRect(0, yStart, xStart, 1)\n        }\n        if (screenRow === range.end.row - 1) {\n          data.context.fillRect(xEnd, yEnd, canvasWidth - xEnd, 1)\n        }\n      }\n    }\n  }\n\n  /**\n   * Copy a part of the offscreen bitmap into the onscreen one to\n   * reduce the amount of rendered lines during scroll.\n   *\n   * @param  {CanvasRenderingContext2D} context [description]\n   * @param  {HTMLCanvasElement} bitmapCanvas [description]\n   * @param  {number} srcRow the source row of the region to copy\n   * @param  {number} destRow the destination row\n   * @param  {number} rowCount the amount of lines to copy\n   * @access private\n   */\n  copyBitmapPart (context, bitmapCanvas, srcRow, destRow, rowCount) {\n    let lineHeight = this.minimap.getLineHeight() * devicePixelRatio\n\n    context.drawImage(\n      bitmapCanvas,\n      0, srcRow * lineHeight, bitmapCanvas.width, rowCount * lineHeight,\n      0, destRow * lineHeight, bitmapCanvas.width, rowCount * lineHeight\n    )\n  }\n\n  //    ########     ###    ##    ##  ######   ########  ######\n  //    ##     ##   ## ##   ###   ## ##    ##  ##       ##    ##\n  //    ##     ##  ##   ##  ####  ## ##        ##       ##\n  //    ########  ##     ## ## ## ## ##   #### ######    ######\n  //    ##   ##   ######### ##  #### ##    ##  ##             ##\n  //    ##    ##  ##     ## ##   ### ##    ##  ##       ##    ##\n  //    ##     ## ##     ## ##    ##  ######   ########  ######\n\n  /**\n   * Renders the lines between the intact ranges when an update has pending\n   * changes.\n   *\n   * @param  {CanvasRenderingContext2D} context the target canvas context\n   * @param  {Array<Object>} intactRanges the intact ranges in the minimap\n   * @param  {number} firstRow the first row of the rendered region\n   * @param  {number} lastRow the last row of the rendered region\n   * @access private\n   */\n  fillGapsBetweenIntactRanges (context, intactRanges, firstRow, lastRow) {\n    let currentRow = firstRow\n    for (let i = 0, len = intactRanges.length; i < len; i++) {\n      let intact = intactRanges[i]\n\n      this.drawLines(context, currentRow, intact.start - 1, currentRow - firstRow)\n\n      currentRow = intact.end\n    }\n    if (currentRow <= lastRow) {\n      this.drawLines(context, currentRow, lastRow, currentRow - firstRow)\n    }\n  }\n\n  /**\n   * Computes the ranges that are not affected by the current pending changes.\n   *\n   * @param  {number} firstRow the first row of the rendered region\n   * @param  {number} lastRow the last row of the rendered region\n   * @return {Array<Object>} the intact ranges in the rendered region\n   * @access private\n   */\n  computeIntactRanges (firstRow, lastRow) {\n    if ((this.offscreenFirstRow == null) && (this.offscreenLastRow == null)) {\n      return []\n    }\n\n    let intactRanges = [\n      {\n        start: this.offscreenFirstRow,\n        end: this.offscreenLastRow,\n        offscreenRow: 0\n      }\n    ]\n\n    let changes = this.pendingChanges\n\n    for (let i = 0, len = changes.length; i < len; i++) {\n      let change = changes[i]\n      let newIntactRanges = []\n\n      for (let j = 0, intactLen = intactRanges.length; j < intactLen; j++) {\n        let range = intactRanges[j]\n\n        if (change.end < range.start && change.screenDelta !== 0) {\n          newIntactRanges.push({\n            start: range.start + change.screenDelta,\n            end: range.end + change.screenDelta,\n            offscreenRow: range.offscreenRow\n          })\n        } else if (change.end < range.start || change.start > range.end) {\n          newIntactRanges.push(range)\n        } else {\n          if (change.start > range.start) {\n            newIntactRanges.push({\n              start: range.start,\n              end: change.start - 1,\n              offscreenRow: range.offscreenRow\n            })\n          }\n          if (change.end < range.end && change.bufferDelta !== 0) {\n            newIntactRanges.push({\n              start: change.end + change.screenDelta + 1,\n              end: range.end + change.screenDelta,\n              offscreenRow: range.offscreenRow + change.end + 1 - range.start\n            })\n          }\n        }\n      }\n      intactRanges = newIntactRanges\n    }\n\n    this.pendingChanges = []\n    return this.truncateIntactRanges(intactRanges, firstRow, lastRow)\n  }\n\n  /**\n   * Truncates the intact ranges so that they doesn't expand past the visible\n   * area of the minimap.\n   *\n   * @param  {Array<Object>} intactRanges the initial array of ranges\n   * @param  {number} firstRow the first row of the rendered region\n   * @param  {number} lastRow the last row of the rendered region\n   * @return {Array<Object>} the array of truncated ranges\n   * @access private\n   */\n  truncateIntactRanges (intactRanges, firstRow, lastRow) {\n    let i = 0\n    while (i < intactRanges.length) {\n      let range = intactRanges[i]\n\n      if (range.start < firstRow) {\n        range.offscreenRow += firstRow - range.start\n        range.start = firstRow\n      }\n\n      if (range.end > lastRow) { range.end = lastRow }\n\n      if (range.start >= range.end) { intactRanges.splice(i--, 1) }\n\n      i++\n    }\n\n    return intactRanges.sort((a, b) => {\n      return a.offscreenRow - b.offscreenRow\n    })\n  }\n}\n"
  },
  {
    "__docId__": 367,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CanvasDrawer",
    "memberof": "lib/mixins/canvas-drawer.js",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "access": null,
    "export": true,
    "importPath": "minimap/lib/mixins/canvas-drawer.js",
    "importStyle": "CanvasDrawer",
    "description": "The `CanvasDrawer` mixin is responsible for the rendering of a `Minimap`\nin a `canvas` element.\n\nThis mixin is injected in the `MinimapElement` prototype, so all these\nmethods  are available on any `MinimapElement` instance.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "mixto~Mixin"
    ]
  },
  {
    "__docId__": 368,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initializeCanvas",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#initializeCanvas",
    "access": null,
    "description": "Initializes the canvas elements needed to perform the `Minimap` rendering.",
    "lineNumber": 17,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 369,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "canvas",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#canvas",
    "access": null,
    "description": "The onscreen canvas.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "context",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#context",
    "access": null,
    "description": "The onscreen canvas context.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "CanvasRenderingContext2D"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "offscreenCanvas",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#offscreenCanvas",
    "access": "private",
    "description": "The offscreen canvas.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 372,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "offscreenContext",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#offscreenContext",
    "access": "private",
    "description": "The offscreen canvas context.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "CanvasRenderingContext2D"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pendingChanges",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#pendingChanges",
    "access": "private",
    "description": "Stores the changes from the text editor and the minimap.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateCanvas",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#updateCanvas",
    "access": null,
    "description": "Performs an update of the rendered `Minimap` based on the changes\nregistered in the instance.",
    "lineNumber": 60,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 375,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "offscreenFirstRow",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#offscreenFirstRow",
    "access": "private",
    "description": "The first row in the last render of the offscreen canvas.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 376,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "offscreenLastRow",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#offscreenLastRow",
    "access": "private",
    "description": "The last row in the last render of the offscreen canvas.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTextOpacity",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#getTextOpacity",
    "access": null,
    "description": "Returns the opacity value to use when rendering the `Minimap` text.",
    "lineNumber": 108,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the text opacity value"
    },
    "generator": false
  },
  {
    "__docId__": 378,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDefaultColor",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#getDefaultColor",
    "access": null,
    "description": "Returns the default text color for an editor content.\n\nThe color value is directly read from the `TextEditorView` computed styles.",
    "lineNumber": 117,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a CSS color"
    },
    "generator": false
  },
  {
    "__docId__": 379,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTokenColor",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#getTokenColor",
    "access": null,
    "description": "Returns the text color for the passed-in `token` object.\n\nThe color value is read from the DOM by creating a node structure that\nmatch the token `scope` property.",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "a `TextEditor` token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the CSS color for the provided token"
    },
    "generator": false
  },
  {
    "__docId__": 380,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDecorationColor",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#getDecorationColor",
    "access": null,
    "description": "Returns the background color for the passed-in `decoration` object.\n\nThe color value is read from the DOM by creating a node structure that\nmatch the decoration `scope` property unless the decoration provides\nits own `color` property.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decoration"
        ],
        "spread": false,
        "optional": false,
        "name": "decoration",
        "description": "the decoration to get the color for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the CSS color for the provided decoration"
    },
    "generator": false
  },
  {
    "__docId__": 381,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "transparentize",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#transparentize",
    "access": "private",
    "description": "Converts a `rgb(...)` color into a `rgba(...)` color with the specified\nopacity.",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "the CSS RGB color to transparentize"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "opacity",
        "description": "the opacity amount"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the transparentized CSS color"
    },
    "generator": false
  },
  {
    "__docId__": 382,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "drawLines",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#drawLines",
    "access": "private",
    "description": "Draws lines on the passed-in `context`.\n\nThe lines range to draw is specified by the `firstRow` and `lastRow`\nparameters.",
    "lineNumber": 191,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the canvas's context where\n                                           drawing the lines"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstRow",
        "description": "the first row to render"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lastRow",
        "description": "the last row to render"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offsetRow",
        "description": "the relative offset to apply to rows when\n                           rendering them"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 383,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getInvisibleRegExp",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#getInvisibleRegExp",
    "access": "private",
    "description": "Returns the regexp to replace invisibles substitution characters\nin editor lines.",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "TokenizedLine"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "a tokenized lize to read the invisible\n                             characters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": "the regular expression to match invisible characters"
    },
    "generator": false
  },
  {
    "__docId__": 384,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "drawToken",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#drawToken",
    "access": "private",
    "description": "Draws a single token on the given context.",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the target canvas context"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the token's text content"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "the token's CSS color"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "the x position of the token in the line"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "the y position of the line in the minimap"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "charWidth",
        "description": "the width of a character in the minimap"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "charHeight",
        "description": "the height of a character in the minimap"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the x position at the end of the token"
    },
    "generator": false
  },
  {
    "__docId__": 385,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "drawDecorations",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#drawDecorations",
    "access": "private",
    "description": "Draws the specified decorations for the current `screenRow`.\n\nThe `decorations` object contains all the decorations grouped by type and\nthen rows.",
    "lineNumber": 330,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "screenRow",
        "description": "the screen row index for which\n                           render decorations"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "decorations",
        "description": "the object containing all the decorations"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "the type of decorations to render"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "renderData",
        "description": "the object containing the render data"
      },
      {
        "nullable": null,
        "types": [
          "Fundtion"
        ],
        "spread": false,
        "optional": false,
        "name": "renderMethod",
        "description": "the method to call to render\n                                the decorations"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 386,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "drawLineDecoration",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#drawLineDecoration",
    "access": "private",
    "description": "Draws a line decoration.",
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decoration"
        ],
        "spread": false,
        "optional": false,
        "name": "decoration",
        "description": "the decoration to render"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "the data need to perform the render"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 387,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "drawHighlightDecoration",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#drawHighlightDecoration",
    "access": "private",
    "description": "Draws a highlight decoration.\n\nIt renders only the part of the highlight corresponding to the specified\nrow.",
    "lineNumber": 363,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decoration"
        ],
        "spread": false,
        "optional": false,
        "name": "decoration",
        "description": "the decoration to render"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "the data need to perform the render"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 388,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "drawHighlightOutlineDecoration",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#drawHighlightOutlineDecoration",
    "access": "private",
    "description": "Draws a highlight outline decoration.\n\nIt renders only the part of the highlight corresponding to the specified\nrow.",
    "lineNumber": 392,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decoration"
        ],
        "spread": false,
        "optional": false,
        "name": "decoration",
        "description": "the decoration to render"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "the data need to perform the render"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 389,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "copyBitmapPart",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#copyBitmapPart",
    "access": "private",
    "description": "Copy a part of the offscreen bitmap into the onscreen one to\nreduce the amount of rendered lines during scroll.",
    "lineNumber": 473,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement"
        ],
        "spread": false,
        "optional": false,
        "name": "bitmapCanvas",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "srcRow",
        "description": "the source row of the region to copy"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "destRow",
        "description": "the destination row"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "rowCount",
        "description": "the amount of lines to copy"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 390,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fillGapsBetweenIntactRanges",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#fillGapsBetweenIntactRanges",
    "access": "private",
    "description": "Renders the lines between the intact ranges when an update has pending\nchanges.",
    "lineNumber": 501,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the target canvas context"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "intactRanges",
        "description": "the intact ranges in the minimap"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstRow",
        "description": "the first row of the rendered region"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lastRow",
        "description": "the last row of the rendered region"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 391,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeIntactRanges",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#computeIntactRanges",
    "access": "private",
    "description": "Computes the ranges that are not affected by the current pending changes.",
    "lineNumber": 523,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstRow",
        "description": "the first row of the rendered region"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lastRow",
        "description": "the last row of the rendered region"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "the intact ranges in the rendered region"
    },
    "generator": false
  },
  {
    "__docId__": 392,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pendingChanges",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#pendingChanges",
    "access": null,
    "description": null,
    "lineNumber": 573,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "truncateIntactRanges",
    "memberof": "lib/mixins/canvas-drawer.js~CanvasDrawer",
    "longname": "lib/mixins/canvas-drawer.js~CanvasDrawer#truncateIntactRanges",
    "access": "private",
    "description": "Truncates the intact ranges so that they doesn't expand past the visible\narea of the minimap.",
    "lineNumber": 587,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "intactRanges",
        "description": "the initial array of ranges"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstRow",
        "description": "the first row of the rendered region"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lastRow",
        "description": "the last row of the rendered region"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "the array of truncated ranges"
    },
    "generator": false
  },
  {
    "__docId__": 394,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/mixins/decoration-management.js",
    "memberof": null,
    "longname": "lib/mixins/decoration-management.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\nimport Mixin from 'mixto'\nimport {Emitter} from 'atom'\nimport Decoration from '../decoration'\n\n/**\n * The mixin that provides the decorations API to the minimap editor\n * view.\n *\n * This mixin is injected into the `Minimap` prototype, so every methods defined\n * in this file will be available on any `Minimap` instance.\n */\nexport default class DecorationManagement extends Mixin {\n\n  /**\n   * Initializes the decorations related properties.\n   */\n  initializeDecorations () {\n    if (this.emitter == null) {\n      /**\n       * The minimap emitter, lazily created if not created yet.\n       * @type {Emitter}\n       * @access private\n       */\n      this.emitter = new Emitter()\n    }\n\n    /**\n     * A map with the decoration id as key and the decoration as value.\n     * @type {Object}\n     * @access private\n     */\n    this.decorationsById = {}\n    /**\n     * The decorations stored in an array indexed with their marker id.\n     * @type {Object}\n     * @access private\n     */\n    this.decorationsByMarkerId = {}\n    /**\n     * The subscriptions to the markers `did-change` event indexed using the\n     * marker id.\n     * @type {Object}\n     * @access private\n     */\n    this.decorationMarkerChangedSubscriptions = {}\n    /**\n     * The subscriptions to the markers `did-destroy` event indexed using the\n     * marker id.\n     * @type {Object}\n     * @access private\n     */\n    this.decorationMarkerDestroyedSubscriptions = {}\n    /**\n     * The subscriptions to the decorations `did-change-properties` event\n     * indexed using the decoration id.\n     * @type {Object}\n     * @access private\n     */\n    this.decorationUpdatedSubscriptions = {}\n    /**\n     * The subscriptions to the decorations `did-destroy` event indexed using\n     * the decoration id.\n     * @type {Object}\n     * @access private\n     */\n    this.decorationDestroyedSubscriptions = {}\n  }\n\n  /**\n   * Returns all the decorations registered in the current `Minimap`.\n   *\n   * @return {Array<Decoration>} all the decorations in this `Minimap`\n   */\n  getDecorations () {\n    let decorations = this.decorationsById\n    let results = []\n\n    for (let id in decorations) { results.push(decorations[id]) }\n\n    return results\n  }\n\n  /**\n   * Registers an event listener to the `did-add-decoration` event.\n   *\n   * @param  {function(event:Object):void} callback a function to call when the\n   *                                               event is triggered.\n   *                                               the callback will be called\n   *                                               with an event object with\n   *                                               the following properties:\n   * - marker: the marker object that was decorated\n   * - decoration: the decoration object that was created\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidAddDecoration (callback) {\n    return this.emitter.on('did-add-decoration', callback)\n  }\n\n  /**\n   * Registers an event listener to the `did-remove-decoration` event.\n   *\n   * @param  {function(event:Object):void} callback a function to call when the\n   *                                               event is triggered.\n   *                                               the callback will be called\n   *                                               with an event object with\n   *                                               the following properties:\n   * - marker: the marker object that was decorated\n   * - decoration: the decoration object that was created\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidRemoveDecoration (callback) {\n    return this.emitter.on('did-remove-decoration', callback)\n  }\n\n  /**\n   * Registers an event listener to the `did-change-decoration` event.\n   *\n   * This event is triggered when the marker targeted by the decoration\n   * was changed.\n   *\n   * @param  {function(event:Object):void} callback a function to call when the\n   *                                               event is triggered.\n   *                                               the callback will be called\n   *                                               with an event object with\n   *                                               the following properties:\n   * - marker: the marker object that was decorated\n   * - decoration: the decoration object that was created\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidChangeDecoration (callback) {\n    return this.emitter.on('did-change-decoration', callback)\n  }\n\n  /**\n   * Registers an event listener to the `did-update-decoration` event.\n   *\n   * This event is triggered when the decoration itself is modified.\n   *\n   * @param  {function(decoration:Decoration):void} callback a function to call\n   *                                                         when the event is\n   *                                                         triggered\n   * @return {Disposable} a disposable to stop listening to the event\n   */\n  onDidUpdateDecoration (callback) {\n    return this.emitter.on('did-update-decoration', callback)\n  }\n\n  /**\n   * Returns the decoration with the passed-in id.\n   *\n   * @param  {number} id the decoration id\n   * @return {Decoration} the decoration with the given id\n   */\n  decorationForId (id) {\n    return this.decorationsById[id]\n  }\n\n  /**\n   * Returns all the decorations that intersect the passed-in row range.\n   *\n   * @param  {number} startScreenRow the first row of the range\n   * @param  {number} endScreenRow the last row of the range\n   * @return {Array<Decoration>} the decorations that intersect the passed-in\n   *                             range\n   */\n  decorationsForScreenRowRange (startScreenRow, endScreenRow) {\n    let decorationsByMarkerId = {}\n    let markers = this.findMarkers({\n      intersectsScreenRowRange: [startScreenRow, endScreenRow]\n    })\n\n    for (let i = 0, len = markers.length; i < len; i++) {\n      let marker = markers[i]\n      let decorations = this.decorationsByMarkerId[marker.id]\n\n      if (decorations != null) {\n        decorationsByMarkerId[marker.id] = decorations\n      }\n    }\n\n    return decorationsByMarkerId\n  }\n\n  /**\n   * Returns the decorations that intersects the passed-in row range\n   * in a structured way.\n   *\n   * At the first level, the keys are the available decoration types.\n   * At the second level, the keys are the row index for which there\n   * are decorations available. The value is an array containing the\n   * decorations that intersects with the corresponding row.\n   *\n   * @return {Object} the decorations grouped by type and then rows\n   * @property {Object} line all the line decorations by row\n   * @property {Array<Decoration>} line[row] all the line decorations\n   *                                    at a given row\n   * @property {Object} highlight-under all the highlight-under decorations\n   *                                    by row\n   * @property {Array<Decoration>} highlight-under[row] all the highlight-under\n   *                                    decorations at a given row\n   * @property {Object} highlight-over all the highlight-over decorations\n   *                                    by row\n   * @property {Array<Decoration>} highlight-over[row] all the highlight-over\n   *                                    decorations at a given row\n   * @property {Object} highlight-outine all the highlight-outine decorations\n   *                                    by row\n   * @property {Array<Decoration>} highlight-outine[row] all the\n   *                                    highlight-outine decorations at a given\n   *                                    row\n   */\n  decorationsByTypeThenRows () {\n    if (this.decorationsByTypeThenRowsCache != null) {\n      return this.decorationsByTypeThenRowsCache\n    }\n\n    let cache = {}\n    for (let id in this.decorationsById) {\n      let decoration = this.decorationsById[id]\n      let range = decoration.marker.getScreenRange()\n      let type = decoration.getProperties().type\n\n      if (cache[type] == null) { cache[type] = {} }\n\n      for (let row = range.start.row, len = range.end.row; row <= len; row++) {\n        if (cache[type][row] == null) { cache[type][row] = [] }\n\n        cache[type][row].push(decoration)\n      }\n    }\n\n    /**\n     * The grouped decorations cache.\n     * @type {Object}\n     * @access private\n     */\n    this.decorationsByTypeThenRowsCache = cache\n    return cache\n  }\n\n  /**\n   * Invalidates the decoration by screen rows cache.\n   */\n  invalidateDecorationForScreenRowsCache () {\n    this.decorationsByTypeThenRowsCache = null\n  }\n\n  /**\n   * Adds a decoration that tracks a `Marker`. When the marker moves,\n   * is invalidated, or is destroyed, the decoration will be updated to reflect\n   * the marker's state.\n   *\n   * @param  {Marker} marker the marker you want this decoration to follow\n   * @param  {Object} decorationParams the decoration properties\n   * @param  {string} decorationParams.type the decoration type in the following\n   *                                        list:\n   * - __line__: Fills the line background with the decoration color.\n   * - __highlight__: Renders a colored rectangle on the minimap. The highlight\n   *   is rendered above the line's text.\n   * - __highlight-over__: Same as __highlight__.\n   * - __highlight-under__: Renders a colored rectangle on the minimap. The\n   *   highlight is rendered below the line's text.\n   * - __highlight-outline__: Renders a colored outline on the minimap. The\n   *   highlight box is rendered above the line's text.\n   * @param  {string} decorationParams.class the CSS class to use to retrieve\n   *                                        the background color of the\n   *                                        decoration by building a scop\n   *                                        corresponding to\n   *                                        `.minimap .editor <your-class>`\n   * @param  {string} decorationParams.scope the scope to use to retrieve the\n   *                                        decoration background. Note that if\n   *                                        the `scope` property is set, the\n   *                                        `class` won't be used.\n   * @param  {string} decorationParams.color the CSS color to use to render the\n   *                                        decoration. When set, neither\n   *                                        `scope` nor `class` are used.\n   * @return {Decoration} the created decoration\n   * @emits  {did-add-decoration} when the decoration is created successfully\n   * @emits  {did-change} when the decoration is created successfully\n   */\n  decorateMarker (marker, decorationParams) {\n    if (this.destroyed || marker == null) { return }\n\n    marker = this.getMarker(marker.id)\n    if (marker == null) { return }\n\n    if (decorationParams.type === 'highlight') {\n      decorationParams.type = 'highlight-over'\n    }\n\n    if (decorationParams.scope == null && decorationParams['class'] != null) {\n      let cls = decorationParams['class'].split(' ').join('.')\n      decorationParams.scope = `.minimap .${cls}`\n    }\n\n    if (this.decorationMarkerDestroyedSubscriptions[marker.id] == null) {\n      this.decorationMarkerDestroyedSubscriptions[marker.id] =\n      marker.onDidDestroy(() => {\n        this.removeAllDecorationsForMarker(marker)\n      })\n    }\n\n    if (this.decorationMarkerChangedSubscriptions[marker.id] == null) {\n      this.decorationMarkerChangedSubscriptions[marker.id] =\n      marker.onDidChange((event) => {\n        let decorations = this.decorationsByMarkerId[marker.id]\n\n        this.invalidateDecorationForScreenRowsCache()\n\n        if (decorations != null) {\n          for (let i = 0, len = decorations.length; i < len; i++) {\n            let decoration = decorations[i]\n            this.emitter.emit('did-change-decoration', {\n              marker: marker,\n              decoration: decoration,\n              event: event\n            })\n          }\n        }\n        let oldStart = event.oldTailScreenPosition\n        let oldEnd = event.oldHeadScreenPosition\n        let newStart = event.newTailScreenPosition\n        let newEnd = event.newHeadScreenPosition\n\n        if (oldStart.row > oldEnd.row) {\n          [oldStart, oldEnd] = [oldEnd, oldStart]\n        }\n        if (newStart.row > newEnd.row) {\n          [newStart, newEnd] = [newEnd, newStart]\n        }\n\n        let rangesDiffs = this.computeRangesDiffs(\n          oldStart, oldEnd,\n          newStart, newEnd\n        )\n\n        for (let i = 0, len = rangesDiffs.length; i < len; i++) {\n          let [start, end] = rangesDiffs[i]\n          this.emitRangeChanges({\n            start: start,\n            end: end\n          }, 0)\n        }\n      })\n    }\n\n    let decoration = new Decoration(marker, this, decorationParams)\n\n    if (this.decorationsByMarkerId[marker.id] == null) {\n      this.decorationsByMarkerId[marker.id] = []\n    }\n\n    this.decorationsByMarkerId[marker.id].push(decoration)\n    this.decorationsById[decoration.id] = decoration\n\n    if (this.decorationUpdatedSubscriptions[decoration.id] == null) {\n      this.decorationUpdatedSubscriptions[decoration.id] =\n      decoration.onDidChangeProperties((event) => {\n        this.emitDecorationChanges(decoration)\n      })\n    }\n\n    this.decorationDestroyedSubscriptions[decoration.id] =\n    decoration.onDidDestroy(() => {\n      this.removeDecoration(decoration)\n    })\n\n    this.emitDecorationChanges(decoration)\n    this.emitter.emit('did-add-decoration', {\n      marker: marker,\n      decoration: decoration\n    })\n\n    return decoration\n  }\n\n  /**\n   * Given two ranges, it returns an array of ranges representing the\n   * differences between them.\n   *\n   * @param  {number} oldStart the row index of the first range start\n   * @param  {number} oldEnd the row index of the first range end\n   * @param  {number} newStart the row index of the second range start\n   * @param  {number} newEnd the row index of the second range end\n   * @return {Array<Object>} the array of diff ranges\n   * @access private\n   */\n  computeRangesDiffs (oldStart, oldEnd, newStart, newEnd) {\n    let diffs = []\n\n    if (oldStart.isLessThan(newStart)) {\n      diffs.push([oldStart, newStart])\n    } else if (newStart.isLessThan(oldStart)) {\n      diffs.push([newStart, oldStart])\n    }\n\n    if (oldEnd.isLessThan(newEnd)) {\n      diffs.push([oldEnd, newEnd])\n    } else if (newEnd.isLessThan(oldEnd)) {\n      diffs.push([newEnd, oldEnd])\n    }\n\n    return diffs\n  }\n\n  /**\n   * Emits a change in the `Minimap` corresponding to the\n   * passed-in decoration.\n   *\n   * @param  {Decoration} decoration the decoration for which emitting an event\n   * @access private\n   */\n  emitDecorationChanges (decoration) {\n    if (decoration.marker.displayBuffer.isDestroyed()) { return }\n\n    this.invalidateDecorationForScreenRowsCache()\n\n    let range = decoration.marker.getScreenRange()\n    if (range == null) { return }\n\n    this.emitRangeChanges(range, 0)\n  }\n\n  /**\n   * Emits a change for the specified range.\n   *\n   * @param  {Object} range the range where changes occured\n   * @param  {number} [screenDelta] an optional screen delta for the\n   *                                change object\n   * @access private\n   */\n  emitRangeChanges (range, screenDelta) {\n    let startScreenRow = range.start.row\n    let endScreenRow = range.end.row\n    let lastRenderedScreenRow = this.getLastVisibleScreenRow()\n    let firstRenderedScreenRow = this.getFirstVisibleScreenRow()\n\n    if (screenDelta == null) {\n      screenDelta = (lastRenderedScreenRow - firstRenderedScreenRow) -\n                    (endScreenRow - startScreenRow)\n    }\n\n    let changeEvent = {\n      start: startScreenRow,\n      end: endScreenRow,\n      screenDelta: screenDelta\n    }\n\n    this.emitChanges(changeEvent)\n  }\n\n  /**\n   * Removes a `Decoration` from this minimap.\n   *\n   * @param  {Decoration} decoration the decoration to remove\n   * @emits  {did-change} when the decoration is removed\n   * @emits  {did-remove-decoration} when the decoration is removed\n   */\n  removeDecoration (decoration) {\n    if (decoration == null) { return }\n\n    let marker = decoration.marker\n    let subscription\n\n    delete this.decorationsById[decoration.id]\n\n    subscription = this.decorationUpdatedSubscriptions[decoration.id]\n    if (subscription != null) { subscription.dispose() }\n\n    subscription = this.decorationDestroyedSubscriptions[decoration.id]\n    if (subscription != null) { subscription.dispose() }\n\n    delete this.decorationUpdatedSubscriptions[decoration.id]\n    delete this.decorationDestroyedSubscriptions[decoration.id]\n\n    let decorations = this.decorationsByMarkerId[marker.id]\n    if (!decorations) { return }\n\n    this.emitDecorationChanges(decoration)\n\n    let index = decorations.indexOf(decoration)\n    if (index > -1) {\n      decorations.splice(index, 1)\n\n      this.emitter.emit('did-remove-decoration', {\n        marker: marker,\n        decoration: decoration\n      })\n\n      if (decorations.length === 0) {\n        this.removedAllMarkerDecorations(marker)\n      }\n    }\n  }\n\n  /**\n   * Removes all the decorations registered for the passed-in marker.\n   *\n   * @param  {Marker} marker the marker for which removing its decorations\n   * @emits  {did-change} when a decoration have been removed\n   * @emits  {did-remove-decoration} when a decoration have been removed\n   */\n  removeAllDecorationsForMarker (marker) {\n    if (marker == null) { return }\n\n    let decorations = this.decorationsByMarkerId[marker.id]\n    if (!decorations) { return }\n\n    for (let i = 0, len = decorations.length; i < len; i++) {\n      let decoration = decorations[i]\n\n      this.emitDecorationChanges(decoration)\n      this.emitter.emit('did-remove-decoration', {\n        marker: marker,\n        decoration: decoration\n      })\n    }\n\n    this.removedAllMarkerDecorations(marker)\n  }\n\n  /**\n   * Performs the removal of a decoration for a given marker.\n   *\n   * @param  {Marker} marker the marker for which removing decorations\n   * @access private\n   */\n  removedAllMarkerDecorations (marker) {\n    if (marker == null) { return }\n\n    this.decorationMarkerChangedSubscriptions[marker.id].dispose()\n    this.decorationMarkerDestroyedSubscriptions[marker.id].dispose()\n\n    delete this.decorationsByMarkerId[marker.id]\n    delete this.decorationMarkerChangedSubscriptions[marker.id]\n    delete this.decorationMarkerDestroyedSubscriptions[marker.id]\n  }\n\n  /**\n   * Removes all the decorations that was created in the current `Minimap`.\n   */\n  removeAllDecorations () {\n    for (let id in this.decorationMarkerChangedSubscriptions) {\n      this.decorationMarkerChangedSubscriptions[id].dispose()\n    }\n\n    for (let id in this.decorationMarkerDestroyedSubscriptions) {\n      this.decorationMarkerDestroyedSubscriptions[id].dispose()\n    }\n\n    for (let id in this.decorationUpdatedSubscriptions) {\n      this.decorationUpdatedSubscriptions[id].dispose()\n    }\n\n    for (let id in this.decorationDestroyedSubscriptions) {\n      this.decorationDestroyedSubscriptions[id].dispose()\n    }\n\n    for (let id in this.decorationsById) {\n      this.decorationsById[id].destroy()\n    }\n\n    this.decorationsById = {}\n    this.decorationsByMarkerId = {}\n    this.decorationMarkerChangedSubscriptions = {}\n    this.decorationMarkerDestroyedSubscriptions = {}\n    this.decorationUpdatedSubscriptions = {}\n    this.decorationDestroyedSubscriptions = {}\n  }\n}\n"
  },
  {
    "__docId__": 395,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DecorationManagement",
    "memberof": "lib/mixins/decoration-management.js",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement",
    "access": null,
    "export": true,
    "importPath": "minimap/lib/mixins/decoration-management.js",
    "importStyle": "DecorationManagement",
    "description": "The mixin that provides the decorations API to the minimap editor\nview.\n\nThis mixin is injected into the `Minimap` prototype, so every methods defined\nin this file will be available on any `Minimap` instance.",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "mixto~Mixin"
    ]
  },
  {
    "__docId__": 396,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initializeDecorations",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#initializeDecorations",
    "access": null,
    "description": "Initializes the decorations related properties.",
    "lineNumber": 19,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 397,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "emitter",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#emitter",
    "access": "private",
    "description": "The minimap emitter, lazily created if not created yet.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Emitter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 398,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationsById",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationsById",
    "access": "private",
    "description": "A map with the decoration id as key and the decoration as value.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 399,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationsByMarkerId",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationsByMarkerId",
    "access": "private",
    "description": "The decorations stored in an array indexed with their marker id.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationMarkerChangedSubscriptions",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationMarkerChangedSubscriptions",
    "access": "private",
    "description": "The subscriptions to the markers `did-change` event indexed using the\nmarker id.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationMarkerDestroyedSubscriptions",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationMarkerDestroyedSubscriptions",
    "access": "private",
    "description": "The subscriptions to the markers `did-destroy` event indexed using the\nmarker id.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 402,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationUpdatedSubscriptions",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationUpdatedSubscriptions",
    "access": "private",
    "description": "The subscriptions to the decorations `did-change-properties` event\nindexed using the decoration id.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 403,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationDestroyedSubscriptions",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationDestroyedSubscriptions",
    "access": "private",
    "description": "The subscriptions to the decorations `did-destroy` event indexed using\nthe decoration id.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDecorations",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#getDecorations",
    "access": null,
    "description": "Returns all the decorations registered in the current `Minimap`.",
    "lineNumber": 76,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Decoration>"
      ],
      "spread": false,
      "description": "all the decorations in this `Minimap`"
    },
    "generator": false
  },
  {
    "__docId__": 405,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidAddDecoration",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#onDidAddDecoration",
    "access": null,
    "description": "Registers an event listener to the `did-add-decoration` event.",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(event:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call when the\n                                              event is triggered.\n                                              the callback will be called\n                                              with an event object with\n                                              the following properties:\n- marker: the marker object that was decorated\n- decoration: the decoration object that was created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 406,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidRemoveDecoration",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#onDidRemoveDecoration",
    "access": null,
    "description": "Registers an event listener to the `did-remove-decoration` event.",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(event:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call when the\n                                              event is triggered.\n                                              the callback will be called\n                                              with an event object with\n                                              the following properties:\n- marker: the marker object that was decorated\n- decoration: the decoration object that was created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 407,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidChangeDecoration",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#onDidChangeDecoration",
    "access": null,
    "description": "Registers an event listener to the `did-change-decoration` event.\n\nThis event is triggered when the marker targeted by the decoration\nwas changed.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(event:Object):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call when the\n                                              event is triggered.\n                                              the callback will be called\n                                              with an event object with\n                                              the following properties:\n- marker: the marker object that was decorated\n- decoration: the decoration object that was created"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 408,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onDidUpdateDecoration",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#onDidUpdateDecoration",
    "access": null,
    "description": "Registers an event listener to the `did-update-decoration` event.\n\nThis event is triggered when the decoration itself is modified.",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(decoration:Decoration):void"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "a function to call\n                                                        when the event is\n                                                        triggered"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "a disposable to stop listening to the event"
    },
    "generator": false
  },
  {
    "__docId__": 409,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decorationForId",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationForId",
    "access": null,
    "description": "Returns the decoration with the passed-in id.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "the decoration id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decoration"
      ],
      "spread": false,
      "description": "the decoration with the given id"
    },
    "generator": false
  },
  {
    "__docId__": 410,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decorationsForScreenRowRange",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationsForScreenRowRange",
    "access": null,
    "description": "Returns all the decorations that intersect the passed-in row range.",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "startScreenRow",
        "description": "the first row of the range"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "endScreenRow",
        "description": "the last row of the range"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Decoration>"
      ],
      "spread": false,
      "description": "the decorations that intersect the passed-in\n                            range"
    },
    "generator": false
  },
  {
    "__docId__": 411,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decorationsByTypeThenRows",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationsByTypeThenRows",
    "access": null,
    "description": "Returns the decorations that intersects the passed-in row range\nin a structured way.\n\nAt the first level, the keys are the available decoration types.\nAt the second level, the keys are the row index for which there\nare decorations available. The value is an array containing the\ndecorations that intersects with the corresponding row.",
    "lineNumber": 213,
    "params": [],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "all the line decorations by row"
      },
      {
        "nullable": null,
        "types": [
          "Array<Decoration>"
        ],
        "spread": false,
        "optional": false,
        "name": "line[row]",
        "description": "all the line decorations\n                                   at a given row"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "highlight-under",
        "description": "all the highlight-under decorations\n                                   by row"
      },
      {
        "nullable": null,
        "types": [
          "Array<Decoration>"
        ],
        "spread": false,
        "optional": false,
        "name": "highlight-under[row]",
        "description": "all the highlight-under\n                                   decorations at a given row"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "highlight-over",
        "description": "all the highlight-over decorations\n                                   by row"
      },
      {
        "nullable": null,
        "types": [
          "Array<Decoration>"
        ],
        "spread": false,
        "optional": false,
        "name": "highlight-over[row]",
        "description": "all the highlight-over\n                                   decorations at a given row"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "highlight-outine",
        "description": "all the highlight-outine decorations\n                                   by row"
      },
      {
        "nullable": null,
        "types": [
          "Array<Decoration>"
        ],
        "spread": false,
        "optional": false,
        "name": "highlight-outine[row]",
        "description": "all the\n                                   highlight-outine decorations at a given\n                                   row"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the decorations grouped by type and then rows"
    },
    "generator": false
  },
  {
    "__docId__": 412,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationsByTypeThenRowsCache",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationsByTypeThenRowsCache",
    "access": "private",
    "description": "The grouped decorations cache.",
    "lineNumber": 238,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "invalidateDecorationForScreenRowsCache",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#invalidateDecorationForScreenRowsCache",
    "access": null,
    "description": "Invalidates the decoration by screen rows cache.",
    "lineNumber": 245,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 414,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationsByTypeThenRowsCache",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationsByTypeThenRowsCache",
    "access": null,
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decorateMarker",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorateMarker",
    "access": null,
    "description": "Adds a decoration that tracks a `Marker`. When the marker moves,\nis invalidated, or is destroyed, the decoration will be updated to reflect\nthe marker's state.",
    "lineNumber": 282,
    "params": [
      {
        "nullable": null,
        "types": [
          "Marker"
        ],
        "spread": false,
        "optional": false,
        "name": "marker",
        "description": "the marker you want this decoration to follow"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "decorationParams",
        "description": "the decoration properties"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "decorationParams.type",
        "description": "the decoration type in the following\n                                       list:\n- __line__: Fills the line background with the decoration color.\n- __highlight__: Renders a colored rectangle on the minimap. The highlight\n  is rendered above the line's text.\n- __highlight-over__: Same as __highlight__.\n- __highlight-under__: Renders a colored rectangle on the minimap. The\n  highlight is rendered below the line's text.\n- __highlight-outline__: Renders a colored outline on the minimap. The\n  highlight box is rendered above the line's text."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "decorationParams.class",
        "description": "the CSS class to use to retrieve\n                                       the background color of the\n                                       decoration by building a scop\n                                       corresponding to\n                                       `.minimap .editor <your-class>`"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "decorationParams.scope",
        "description": "the scope to use to retrieve the\n                                       decoration background. Note that if\n                                       the `scope` property is set, the\n                                       `class` won't be used."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "decorationParams.color",
        "description": "the CSS color to use to render the\n                                       decoration. When set, neither\n                                       `scope` nor `class` are used."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decoration"
      ],
      "spread": false,
      "description": "the created decoration"
    },
    "emits": [
      {
        "types": [
          "did-add-decoration"
        ],
        "description": "when the decoration is created successfully"
      },
      {
        "types": [
          "did-change"
        ],
        "description": "when the decoration is created successfully"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 416,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeRangesDiffs",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#computeRangesDiffs",
    "access": "private",
    "description": "Given two ranges, it returns an array of ranges representing the\ndifferences between them.",
    "lineNumber": 389,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "oldStart",
        "description": "the row index of the first range start"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "oldEnd",
        "description": "the row index of the first range end"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newStart",
        "description": "the row index of the second range start"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newEnd",
        "description": "the row index of the second range end"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "the array of diff ranges"
    },
    "generator": false
  },
  {
    "__docId__": 417,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "emitDecorationChanges",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#emitDecorationChanges",
    "access": "private",
    "description": "Emits a change in the `Minimap` corresponding to the\npassed-in decoration.",
    "lineNumber": 414,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decoration"
        ],
        "spread": false,
        "optional": false,
        "name": "decoration",
        "description": "the decoration for which emitting an event"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 418,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "emitRangeChanges",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#emitRangeChanges",
    "access": "private",
    "description": "Emits a change for the specified range.",
    "lineNumber": 433,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "range",
        "description": "the range where changes occured"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "screenDelta",
        "description": "an optional screen delta for the\n                               change object"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 419,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeDecoration",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#removeDecoration",
    "access": null,
    "description": "Removes a `Decoration` from this minimap.",
    "lineNumber": 460,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decoration"
        ],
        "spread": false,
        "optional": false,
        "name": "decoration",
        "description": "the decoration to remove"
      }
    ],
    "emits": [
      {
        "types": [
          "did-change"
        ],
        "description": "when the decoration is removed"
      },
      {
        "types": [
          "did-remove-decoration"
        ],
        "description": "when the decoration is removed"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 420,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeAllDecorationsForMarker",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#removeAllDecorationsForMarker",
    "access": null,
    "description": "Removes all the decorations registered for the passed-in marker.",
    "lineNumber": 504,
    "params": [
      {
        "nullable": null,
        "types": [
          "Marker"
        ],
        "spread": false,
        "optional": false,
        "name": "marker",
        "description": "the marker for which removing its decorations"
      }
    ],
    "emits": [
      {
        "types": [
          "did-change"
        ],
        "description": "when a decoration have been removed"
      },
      {
        "types": [
          "did-remove-decoration"
        ],
        "description": "when a decoration have been removed"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 421,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removedAllMarkerDecorations",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#removedAllMarkerDecorations",
    "access": "private",
    "description": "Performs the removal of a decoration for a given marker.",
    "lineNumber": 529,
    "params": [
      {
        "nullable": null,
        "types": [
          "Marker"
        ],
        "spread": false,
        "optional": false,
        "name": "marker",
        "description": "the marker for which removing decorations"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 422,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeAllDecorations",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#removeAllDecorations",
    "access": null,
    "description": "Removes all the decorations that was created in the current `Minimap`.",
    "lineNumber": 543,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 423,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationsById",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationsById",
    "access": null,
    "description": null,
    "lineNumber": 564,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationsByMarkerId",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationsByMarkerId",
    "access": null,
    "description": null,
    "lineNumber": 565,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationMarkerChangedSubscriptions",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationMarkerChangedSubscriptions",
    "access": null,
    "description": null,
    "lineNumber": 566,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationMarkerDestroyedSubscriptions",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationMarkerDestroyedSubscriptions",
    "access": null,
    "description": null,
    "lineNumber": 567,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationUpdatedSubscriptions",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationUpdatedSubscriptions",
    "access": null,
    "description": null,
    "lineNumber": 568,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "decorationDestroyedSubscriptions",
    "memberof": "lib/mixins/decoration-management.js~DecorationManagement",
    "longname": "lib/mixins/decoration-management.js~DecorationManagement#decorationDestroyedSubscriptions",
    "access": null,
    "description": null,
    "lineNumber": 569,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/mixins/dom-styles-reader.js",
    "memberof": null,
    "longname": "lib/mixins/dom-styles-reader.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\nimport Mixin from 'mixto'\n\n/**\n * This mixin is used by the `CanvasDrawer` in `MinimapElement` to\n * read the styles informations from the DOM to use when rendering\n * the `Minimap`.\n */\nexport default class DOMStylesReader extends Mixin {\n  /**\n   * Returns the computed values for the given property and scope in the DOM.\n   *\n   * This function insert a dummy element in the DOM to compute\n   * its style, return the specified property, and clear the content of the\n   * dummy element.\n   *\n   * @param  {Array<string>} scopes a list of classes reprensenting the scope\n   *                                to build\n   * @param  {string} property the name of the style property to compute\n   * @param  {boolean} [shadowRoot=true] whether to compute the style inside\n   *                                     a shadow DOM or not\n   * @param  {boolean} [cache=true] whether to cache the computed value or not\n   * @return {string} the computed property's value\n   */\n  retrieveStyleFromDom (scopes, property, shadowRoot = true, cache = true) {\n    this.ensureCache()\n\n    let key = scopes.join(' ')\n    let cachedData = this.constructor.domStylesCache[key]\n\n    if (cache && (cachedData ? cachedData[property] : void 0) != null) {\n      return cachedData[property]\n    }\n\n    this.ensureDummyNodeExistence(shadowRoot)\n\n    if (!cachedData) {\n      this.constructor.domStylesCache[key] = cachedData = {}\n    }\n\n    let parent = this.dummyNode\n    for (let i = 0, len = scopes.length; i < len; i++) {\n      let scope = scopes[i]\n      let node = document.createElement('span')\n      node.className = scope.replace(/\\.+/g, ' ')\n\n      if (parent != null) { parent.appendChild(node) }\n\n      parent = node\n    }\n\n    let style = window.getComputedStyle(parent)\n    let filter = style.getPropertyValue('-webkit-filter')\n    let value = style.getPropertyValue(property)\n\n    if (filter.indexOf('hue-rotate') > -1) {\n      value = this.rotateHue(value, filter)\n    }\n\n    if (value !== '') { cachedData[property] = value }\n\n    this.dummyNode.innerHTML = ''\n    return value\n  }\n\n  /**\n   * Creates a DOM node container for all the operations that need to read\n   * styles properties from DOM.\n   *\n   * @param  {boolean} shadowRoot whether to create the dummy node in the shadow\n   *                              DOM or not\n   * @access private\n   */\n  ensureDummyNodeExistence (shadowRoot) {\n    if (this.dummyNode == null) {\n      /**\n       * @access private\n       */\n      this.dummyNode = document.createElement('span')\n      this.dummyNode.style.visibility = 'hidden'\n    }\n\n    this.getDummyDOMRoot(shadowRoot).appendChild(this.dummyNode)\n  }\n\n  /**\n   * Ensures the presence of the cache object in the class that received\n   * this mixin.\n   *\n   * @access private\n   */\n  ensureCache () {\n    if (!this.constructor.domStylesCache) {\n      this.constructor.domStylesCache = {}\n    }\n  }\n\n  /**\n   * Invalidates the cache by emptying the cache object.\n   */\n  invalidateDOMStylesCache () {\n    this.constructor.domStylesCache = {}\n  }\n\n  /**\n   * Invalidates the cache only for the first tokenization event.\n   *\n   * @access private\n   */\n  invalidateIfFirstTokenization () {\n    if (this.constructor.hasTokenizedOnce) { return }\n    this.invalidateDOMStylesCache()\n    this.constructor.hasTokenizedOnce = true\n  }\n\n  /**\n   * Computes the output color of `value` with a rotated hue defined\n   * in `filter`.\n   *\n   * @param  {string} value the CSS color to apply the rotation on\n   * @param  {string} filter the CSS hue rotate filter declaration\n   * @return {string} the rotated CSS color\n   * @access private\n   */\n  rotateHue (value, filter) {\n    let match = value.match(/rgb(a?)\\((\\d+), (\\d+), (\\d+)(, (\\d+(\\.\\d+)?))?\\)/)\n    let [, , r, g, b, , a] = match\n\n    let [, hue] = filter.match(/hue-rotate\\((\\d+)deg\\)/)\n\n    ;[r, g, b, a, hue] = [r, g, b, a, hue].map(Number)\n    ;[r, g, b] = rotate(r, g, b, hue)\n\n    if (isNaN(a)) {\n      return `rgb(${r}, ${g}, ${b})`\n    } else {\n      return `rgba(${r}, ${g}, ${b}, ${a})`\n    }\n  }\n}\n\n//    ##     ## ######## ##       ########  ######## ########   ######\n//    ##     ## ##       ##       ##     ## ##       ##     ## ##    ##\n//    ##     ## ##       ##       ##     ## ##       ##     ## ##\n//    ######### ######   ##       ########  ######   ########   ######\n//    ##     ## ##       ##       ##        ##       ##   ##         ##\n//    ##     ## ##       ##       ##        ##       ##    ##  ##    ##\n//    ##     ## ######## ######## ##        ######## ##     ##  ######\n\n/**\n * Computes the hue rotation on the provided `r`, `g` and `b` channels\n * by the amount of `angle`.\n *\n * @param  {number} r the red channel of the color to rotate\n * @param  {number} g the green channel of the color to rotate\n * @param  {number} b the blue channel of the color to rotate\n * @param  {number} angle the angle to rotate the hue with\n * @return {Array<number>} the rotated color channels\n * @access private\n */\nfunction rotate (r, g, b, angle) {\n  let matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1]\n  const lumR = 0.2126\n  const lumG = 0.7152\n  const lumB = 0.0722\n  const hueRotateR = 0.143\n  const hueRotateG = 0.140\n  const hueRotateB = 0.283\n  const cos = Math.cos(angle * Math.PI / 180)\n  const sin = Math.sin(angle * Math.PI / 180)\n\n  matrix[0] = lumR + (1 - lumR) * cos - (lumR * sin)\n  matrix[1] = lumG - (lumG * cos) - (lumG * sin)\n  matrix[2] = lumB - (lumB * cos) + (1 - lumB) * sin\n  matrix[3] = lumR - (lumR * cos) + hueRotateR * sin\n  matrix[4] = lumG + (1 - lumG) * cos + hueRotateG * sin\n  matrix[5] = lumB - (lumB * cos) - (hueRotateB * sin)\n  matrix[6] = lumR - (lumR * cos) - ((1 - lumR) * sin)\n  matrix[7] = lumG - (lumG * cos) + lumG * sin\n  matrix[8] = lumB + (1 - lumB) * cos + lumB * sin\n\n  return [\n    clamp(matrix[0] * r + matrix[1] * g + matrix[2] * b),\n    clamp(matrix[3] * r + matrix[4] * g + matrix[5] * b),\n    clamp(matrix[6] * r + matrix[7] * g + matrix[8] * b)\n  ]\n\n  function clamp (num) {\n    return Math.ceil(Math.max(0, Math.min(255, num)))\n  }\n}\n"
  },
  {
    "__docId__": 430,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DOMStylesReader",
    "memberof": "lib/mixins/dom-styles-reader.js",
    "longname": "lib/mixins/dom-styles-reader.js~DOMStylesReader",
    "access": null,
    "export": true,
    "importPath": "minimap/lib/mixins/dom-styles-reader.js",
    "importStyle": "DOMStylesReader",
    "description": "This mixin is used by the `CanvasDrawer` in `MinimapElement` to\nread the styles informations from the DOM to use when rendering\nthe `Minimap`.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "mixto~Mixin"
    ]
  },
  {
    "__docId__": 431,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "retrieveStyleFromDom",
    "memberof": "lib/mixins/dom-styles-reader.js~DOMStylesReader",
    "longname": "lib/mixins/dom-styles-reader.js~DOMStylesReader#retrieveStyleFromDom",
    "access": null,
    "description": "Returns the computed values for the given property and scope in the DOM.\n\nThis function insert a dummy element in the DOM to compute\nits style, return the specified property, and clear the content of the\ndummy element.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "scopes",
        "description": "a list of classes reprensenting the scope\n                               to build"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "the name of the style property to compute"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "shadowRoot",
        "description": "whether to compute the style inside\n                                    a shadow DOM or not"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cache",
        "description": "whether to cache the computed value or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the computed property's value"
    },
    "generator": false
  },
  {
    "__docId__": 432,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "ensureDummyNodeExistence",
    "memberof": "lib/mixins/dom-styles-reader.js~DOMStylesReader",
    "longname": "lib/mixins/dom-styles-reader.js~DOMStylesReader#ensureDummyNodeExistence",
    "access": "private",
    "description": "Creates a DOM node container for all the operations that need to read\nstyles properties from DOM.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "shadowRoot",
        "description": "whether to create the dummy node in the shadow\n                             DOM or not"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 433,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dummyNode",
    "memberof": "lib/mixins/dom-styles-reader.js~DOMStylesReader",
    "longname": "lib/mixins/dom-styles-reader.js~DOMStylesReader#dummyNode",
    "access": "private",
    "description": null,
    "lineNumber": 80,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "ensureCache",
    "memberof": "lib/mixins/dom-styles-reader.js~DOMStylesReader",
    "longname": "lib/mixins/dom-styles-reader.js~DOMStylesReader#ensureCache",
    "access": "private",
    "description": "Ensures the presence of the cache object in the class that received\nthis mixin.",
    "lineNumber": 93,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 435,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "invalidateDOMStylesCache",
    "memberof": "lib/mixins/dom-styles-reader.js~DOMStylesReader",
    "longname": "lib/mixins/dom-styles-reader.js~DOMStylesReader#invalidateDOMStylesCache",
    "access": null,
    "description": "Invalidates the cache by emptying the cache object.",
    "lineNumber": 102,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 436,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "invalidateIfFirstTokenization",
    "memberof": "lib/mixins/dom-styles-reader.js~DOMStylesReader",
    "longname": "lib/mixins/dom-styles-reader.js~DOMStylesReader#invalidateIfFirstTokenization",
    "access": "private",
    "description": "Invalidates the cache only for the first tokenization event.",
    "lineNumber": 111,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 437,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "rotateHue",
    "memberof": "lib/mixins/dom-styles-reader.js~DOMStylesReader",
    "longname": "lib/mixins/dom-styles-reader.js~DOMStylesReader#rotateHue",
    "access": "private",
    "description": "Computes the output color of `value` with a rotated hue defined\nin `filter`.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the CSS color to apply the rotation on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": "the CSS hue rotate filter declaration"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the rotated CSS color"
    },
    "generator": false
  },
  {
    "__docId__": 438,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "rotate",
    "memberof": "lib/mixins/dom-styles-reader.js",
    "longname": "lib/mixins/dom-styles-reader.js~rotate",
    "access": "private",
    "export": false,
    "importPath": "minimap/lib/mixins/dom-styles-reader.js",
    "importStyle": null,
    "description": "Computes the hue rotation on the provided `r`, `g` and `b` channels\nby the amount of `angle`.",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "the red channel of the color to rotate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "the green channel of the color to rotate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "the blue channel of the color to rotate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "the angle to rotate the hue with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "the rotated color channels"
    },
    "generator": false
  },
  {
    "__docId__": 439,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "lib/mixins/plugin-management.js",
    "memberof": null,
    "longname": "lib/mixins/plugin-management.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel'\n\nimport Mixin from 'mixto'\nimport { CompositeDisposable } from 'atom'\n\n/**\n * Provides methods to manage minimap plugins.\n * Minimap plugins are Atom packages that will augment the minimap.\n * They have a secondary activation cycle going on constrained by the minimap\n * package activation. A minimap plugin life cycle will generally look\n * like this:\n *\n * 1. The plugin module is activated by Atom through the `activate` method\n * 2. The plugin then register itself as a minimap plugin using `registerPlugin`\n * 3. The plugin is activated/deactivated according to the minimap settings.\n * 4. On the plugin module deactivation, the plugin must unregisters itself\n *    from the minimap using the `unregisterPlugin`.\n *\n * @access public\n */\nexport default class PluginManagement extends Mixin {\n  /**\n   * Returns the Minimap main module instance.\n   *\n   * @return {Main} The Minimap main module instance.\n   */\n  provideMinimapServiceV1 () { return this }\n\n  /**\n   * Initializes the properties for plugins' management.\n   *\n   * @access private\n   */\n  initializePlugins () {\n    /**\n     * The registered Minimap plugins stored using their name as key.\n     *\n     * @type {Object}\n     * @access private\n     */\n    this.plugins = {}\n    /**\n     * The plugins' subscriptions stored using the plugin names as keys.\n     *\n     * @type {Object}\n     * @access private\n     */\n    this.pluginsSubscriptions = {}\n  }\n\n  /**\n   * Registers a minimap `plugin` with the given `name`.\n   *\n   * @param {string} name The identifying name of the plugin.\n   *                      It will be used as activation settings name\n   *                      as well as the key to unregister the module.\n   * @param {MinimapPlugin} plugin The plugin to register.\n   * @emits {did-add-plugin} with the name and a reference to the added plugin.\n   * @emits {did-activate-plugin} if the plugin was activated during\n   *                              the registration.\n   */\n  registerPlugin (name, plugin) {\n    this.plugins[name] = plugin\n    this.pluginsSubscriptions[name] = new CompositeDisposable()\n\n    let event = { name: name, plugin: plugin }\n    this.emitter.emit('did-add-plugin', event)\n\n    if (atom.config.get('minimap.displayPluginsControls')) {\n      this.registerPluginControls(name, plugin)\n    }\n\n    this.updatesPluginActivationState(name)\n  }\n\n  /**\n   * Unregisters a plugin from the minimap.\n   *\n   * @param {string} name The identifying name of the plugin to unregister.\n   * @emits {did-remove-plugin} with the name and a reference\n   *        to the added plugin.\n   */\n  unregisterPlugin (name) {\n    let plugin = this.plugins[name]\n\n    if (atom.config.get('minimap.displayPluginsControls')) {\n      this.unregisterPluginControls(name)\n    }\n\n    delete this.plugins[name]\n\n    let event = { name: name, plugin: plugin }\n    this.emitter.emit('did-remove-plugin', event)\n  }\n\n  /**\n   * Toggles the specified plugin activation state.\n   *\n   * @param  {string} name     The name of the plugin.\n   * @param  {boolean} boolean An optional boolean to set the activation\n   *                           state of the plugin. If ommitted the new plugin\n   *                           state will be the the inverse of its current\n   *                           state.\n   * @emits {did-activate-plugin} if the plugin was activated by the call.\n   * @emits {did-deactivate-plugin} if the plugin was deactivated by the call.\n   */\n  togglePluginActivation (name, boolean) {\n    let settingsKey = `minimap.plugins.${name}`\n\n    if (boolean !== undefined && boolean !== null) {\n      atom.config.set(settingsKey, boolean)\n    } else {\n      atom.config.set(settingsKey, !atom.config.get(settingsKey))\n    }\n\n    this.updatesPluginActivationState(name)\n  }\n\n  /**\n   * Deactivates all the plugins registered in the minimap package so far.\n   *\n   * @emits {did-deactivate-plugin} for each plugin deactivated by the call.\n   */\n  deactivateAllPlugins () {\n    for (let [name, plugin] of this.eachPlugin()) {\n      plugin.deactivatePlugin()\n      this.emitter.emit('did-deactivate-plugin', { name: name, plugin: plugin })\n    }\n  }\n\n  /**\n   * A generator function to iterate over registered plugins.\n   *\n   * @return An iterable that yield the name and reference to every plugin\n   *         as an array in each iteration.\n   */\n  * eachPlugin () {\n    for (let name in this.plugins) {\n      yield [name, this.plugins[name]]\n    }\n  }\n\n  /**\n   * Updates the plugin activation state according to the current config.\n   *\n   * @param {string} name The identifying name of the plugin to update.\n   * @emits {did-activate-plugin} if the plugin was activated by the call.\n   * @emits {did-deactivate-plugin} if the plugin was deactivated by the call.\n   * @access private\n   */\n  updatesPluginActivationState (name) {\n    let plugin = this.plugins[name]\n    let pluginActive = plugin.isActive()\n    let settingActive = atom.config.get(`minimap.plugins.${name}`)\n    let event = { name: name, plugin: plugin }\n\n    if (settingActive && !pluginActive) {\n      plugin.activatePlugin()\n      this.emitter.emit('did-activate-plugin', event)\n    } else if (pluginActive && !settingActive) {\n      plugin.deactivatePlugin()\n      this.emitter.emit('did-deactivate-plugin', event)\n    }\n  }\n\n  /**\n   * When the `minimap.displayPluginsControls` setting is toggled,\n   * this function will register the commands and setting to manage the plugin\n   * activation from the minimap settings.\n   *\n   * @param {string} name The identifying name of the plugin.\n   * @param {MinimapPlugin} plugin The plugin instance to register\n   *        controls for.\n   * @listens {minimap.plugins.${name}} listen to the setting to update\n   *          the plugin state accordingly.\n   * @listens {minimap:toggle-${name}} listen to the command on `atom-workspace`\n   *          to toggle the plugin state.\n   * @access private\n   */\n  registerPluginControls (name, plugin) {\n    let settingsKey = `minimap.plugins.${name}`\n\n    this.config.plugins.properties[name] = {\n      type: 'boolean',\n      default: true\n    }\n\n    if (atom.config.get(settingsKey) === undefined) {\n      atom.config.set(settingsKey, true)\n    }\n\n    this.pluginsSubscriptions[name].add(atom.config.observe(settingsKey, () => {\n      this.updatesPluginActivationState(name)\n    }))\n\n    this.pluginsSubscriptions[name].add(atom.commands.add('atom-workspace', {\n      [`minimap:toggle-${name}`]: () => {\n        this.togglePluginActivation(name)\n      }\n    }))\n  }\n\n  /**\n   * When the `minimap.displayPluginsControls` setting is toggled,\n   * this function will unregister the commands and setting that\n   * was created previously.\n   *\n   * @param {string} name The identifying name of the plugin.\n   * @access private\n   */\n  unregisterPluginControls (name) {\n    this.pluginsSubscriptions[name].dispose()\n    delete this.pluginsSubscriptions[name]\n    delete this.config.plugins.properties[name]\n  }\n}\n"
  },
  {
    "__docId__": 440,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PluginManagement",
    "memberof": "lib/mixins/plugin-management.js",
    "longname": "lib/mixins/plugin-management.js~PluginManagement",
    "access": "public",
    "export": true,
    "importPath": "minimap/lib/mixins/plugin-management.js",
    "importStyle": "PluginManagement",
    "description": "Provides methods to manage minimap plugins.\nMinimap plugins are Atom packages that will augment the minimap.\nThey have a secondary activation cycle going on constrained by the minimap\npackage activation. A minimap plugin life cycle will generally look\nlike this:\n\n1. The plugin module is activated by Atom through the `activate` method\n2. The plugin then register itself as a minimap plugin using `registerPlugin`\n3. The plugin is activated/deactivated according to the minimap settings.\n4. On the plugin module deactivation, the plugin must unregisters itself\n   from the minimap using the `unregisterPlugin`.",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "mixto~Mixin"
    ]
  },
  {
    "__docId__": 441,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "provideMinimapServiceV1",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#provideMinimapServiceV1",
    "access": null,
    "description": "Returns the Minimap main module instance.",
    "lineNumber": 27,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Main"
      ],
      "spread": false,
      "description": "The Minimap main module instance."
    },
    "generator": false
  },
  {
    "__docId__": 442,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initializePlugins",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#initializePlugins",
    "access": "private",
    "description": "Initializes the properties for plugins' management.",
    "lineNumber": 34,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 443,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "plugins",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#plugins",
    "access": "private",
    "description": "The registered Minimap plugins stored using their name as key.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 444,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pluginsSubscriptions",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#pluginsSubscriptions",
    "access": "private",
    "description": "The plugins' subscriptions stored using the plugin names as keys.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 445,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerPlugin",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#registerPlugin",
    "access": null,
    "description": "Registers a minimap `plugin` with the given `name`.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The identifying name of the plugin.\n                     It will be used as activation settings name\n                     as well as the key to unregister the module."
      },
      {
        "nullable": null,
        "types": [
          "MinimapPlugin"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": "The plugin to register."
      }
    ],
    "emits": [
      {
        "types": [
          "did-add-plugin"
        ],
        "description": "with the name and a reference to the added plugin."
      },
      {
        "types": [
          "did-activate-plugin"
        ],
        "description": "if the plugin was activated during\n                             the registration."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 446,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unregisterPlugin",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#unregisterPlugin",
    "access": null,
    "description": "Unregisters a plugin from the minimap.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The identifying name of the plugin to unregister."
      }
    ],
    "emits": [
      {
        "types": [
          "did-remove-plugin"
        ],
        "description": "with the name and a reference\n       to the added plugin."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 447,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "togglePluginActivation",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#togglePluginActivation",
    "access": null,
    "description": "Toggles the specified plugin activation state.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "boolean",
        "description": "An optional boolean to set the activation\n                          state of the plugin. If ommitted the new plugin\n                          state will be the the inverse of its current\n                          state."
      }
    ],
    "emits": [
      {
        "types": [
          "did-activate-plugin"
        ],
        "description": "if the plugin was activated by the call."
      },
      {
        "types": [
          "did-deactivate-plugin"
        ],
        "description": "if the plugin was deactivated by the call."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 448,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deactivateAllPlugins",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#deactivateAllPlugins",
    "access": null,
    "description": "Deactivates all the plugins registered in the minimap package so far.",
    "lineNumber": 124,
    "params": [],
    "emits": [
      {
        "types": [
          "did-deactivate-plugin"
        ],
        "description": "for each plugin deactivated by the call."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 449,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "eachPlugin",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#eachPlugin",
    "access": null,
    "description": "A generator function to iterate over registered plugins.",
    "lineNumber": 137,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "An iterable that yield the name and reference to every plugin\n        as an array in each iteration."
    },
    "generator": true
  },
  {
    "__docId__": 450,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updatesPluginActivationState",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#updatesPluginActivationState",
    "access": "private",
    "description": "Updates the plugin activation state according to the current config.",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The identifying name of the plugin to update."
      }
    ],
    "emits": [
      {
        "types": [
          "did-activate-plugin"
        ],
        "description": "if the plugin was activated by the call."
      },
      {
        "types": [
          "did-deactivate-plugin"
        ],
        "description": "if the plugin was deactivated by the call."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 451,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerPluginControls",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#registerPluginControls",
    "access": "private",
    "description": "When the `minimap.displayPluginsControls` setting is toggled,\nthis function will register the commands and setting to manage the plugin\nactivation from the minimap settings.",
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The identifying name of the plugin."
      },
      {
        "nullable": null,
        "types": [
          "MinimapPlugin"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": "The plugin instance to register\n       controls for."
      }
    ],
    "listens": [
      {
        "types": [
          "minimap.plugins.${name}"
        ],
        "description": "listen to the setting to update\n         the plugin state accordingly."
      },
      {
        "types": [
          "minimap:toggle-${name}"
        ],
        "description": "listen to the command on `atom-workspace`\n         to toggle the plugin state."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 452,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unregisterPluginControls",
    "memberof": "lib/mixins/plugin-management.js~PluginManagement",
    "longname": "lib/mixins/plugin-management.js~PluginManagement#unregisterPluginControls",
    "access": "private",
    "description": "When the `minimap.displayPluginsControls` setting is toggled,\nthis function will unregister the commands and setting that\nwas created previously.",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The identifying name of the plugin."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 454,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 455,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 456,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 457,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 458,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 459,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 460,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 461,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 462,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 463,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 464,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 465,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 466,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 467,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 468,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 469,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 470,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 471,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 472,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 473,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 474,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 475,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 476,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 477,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 478,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 479,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 480,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 481,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 482,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 483,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 484,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 485,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 486,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 487,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 488,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 489,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 490,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 491,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 492,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 493,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 494,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 495,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 496,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 497,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 498,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 499,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 500,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 502,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 503,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 504,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 505,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 506,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 507,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 508,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 509,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": null,
    "builtinExternal": true
  }
]